// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: keyspacepb.proto

package keyspacepb

import (
	"fmt"
	"io"
	"math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"

	pdpb "github.com/pingcap/kvproto/pkg/pdpb"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KeyspaceState int32

const (
	KeyspaceState_ENABLED   KeyspaceState = 0
	KeyspaceState_DISABLED  KeyspaceState = 1
	KeyspaceState_ARCHIVED  KeyspaceState = 2
	KeyspaceState_TOMBSTONE KeyspaceState = 3
)

var KeyspaceState_name = map[int32]string{
	0: "ENABLED",
	1: "DISABLED",
	2: "ARCHIVED",
	3: "TOMBSTONE",
}
var KeyspaceState_value = map[string]int32{
	"ENABLED":   0,
	"DISABLED":  1,
	"ARCHIVED":  2,
	"TOMBSTONE": 3,
}

func (x KeyspaceState) String() string {
	return proto.EnumName(KeyspaceState_name, int32(x))
}
func (KeyspaceState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_keyspacepb_f0be7b63ff329f0c, []int{0}
}

type KeyspaceMeta struct {
	Id                   uint32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	State                KeyspaceState     `protobuf:"varint,3,opt,name=state,proto3,enum=keyspacepb.KeyspaceState" json:"state,omitempty"`
	CreatedAt            int64             `protobuf:"varint,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	StateChangedAt       int64             `protobuf:"varint,5,opt,name=state_changed_at,json=stateChangedAt,proto3" json:"state_changed_at,omitempty"`
	Config               map[string]string `protobuf:"bytes,7,rep,name=config" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *KeyspaceMeta) Reset()         { *m = KeyspaceMeta{} }
func (m *KeyspaceMeta) String() string { return proto.CompactTextString(m) }
func (*KeyspaceMeta) ProtoMessage()    {}
func (*KeyspaceMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_keyspacepb_f0be7b63ff329f0c, []int{0}
}
func (m *KeyspaceMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyspaceMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyspaceMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KeyspaceMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyspaceMeta.Merge(dst, src)
}
func (m *KeyspaceMeta) XXX_Size() int {
	return m.Size()
}
func (m *KeyspaceMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyspaceMeta.DiscardUnknown(m)
}

var xxx_messageInfo_KeyspaceMeta proto.InternalMessageInfo

func (m *KeyspaceMeta) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *KeyspaceMeta) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KeyspaceMeta) GetState() KeyspaceState {
	if m != nil {
		return m.State
	}
	return KeyspaceState_ENABLED
}

func (m *KeyspaceMeta) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *KeyspaceMeta) GetStateChangedAt() int64 {
	if m != nil {
		return m.StateChangedAt
	}
	return 0
}

func (m *KeyspaceMeta) GetConfig() map[string]string {
	if m != nil {
		return m.Config
	}
	return nil
}

type LoadKeyspaceRequest struct {
	Header               *pdpb.RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Name                 string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *LoadKeyspaceRequest) Reset()         { *m = LoadKeyspaceRequest{} }
func (m *LoadKeyspaceRequest) String() string { return proto.CompactTextString(m) }
func (*LoadKeyspaceRequest) ProtoMessage()    {}
func (*LoadKeyspaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_keyspacepb_f0be7b63ff329f0c, []int{1}
}
func (m *LoadKeyspaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadKeyspaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadKeyspaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LoadKeyspaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadKeyspaceRequest.Merge(dst, src)
}
func (m *LoadKeyspaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *LoadKeyspaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadKeyspaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoadKeyspaceRequest proto.InternalMessageInfo

func (m *LoadKeyspaceRequest) GetHeader() *pdpb.RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *LoadKeyspaceRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type LoadKeyspaceResponse struct {
	Header               *pdpb.ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Keyspace             *KeyspaceMeta        `protobuf:"bytes,2,opt,name=keyspace" json:"keyspace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *LoadKeyspaceResponse) Reset()         { *m = LoadKeyspaceResponse{} }
func (m *LoadKeyspaceResponse) String() string { return proto.CompactTextString(m) }
func (*LoadKeyspaceResponse) ProtoMessage()    {}
func (*LoadKeyspaceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_keyspacepb_f0be7b63ff329f0c, []int{2}
}
func (m *LoadKeyspaceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadKeyspaceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadKeyspaceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LoadKeyspaceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadKeyspaceResponse.Merge(dst, src)
}
func (m *LoadKeyspaceResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoadKeyspaceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadKeyspaceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoadKeyspaceResponse proto.InternalMessageInfo

func (m *LoadKeyspaceResponse) GetHeader() *pdpb.ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *LoadKeyspaceResponse) GetKeyspace() *KeyspaceMeta {
	if m != nil {
		return m.Keyspace
	}
	return nil
}

type WatchKeyspacesRequest struct {
	Header               *pdpb.RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *WatchKeyspacesRequest) Reset()         { *m = WatchKeyspacesRequest{} }
func (m *WatchKeyspacesRequest) String() string { return proto.CompactTextString(m) }
func (*WatchKeyspacesRequest) ProtoMessage()    {}
func (*WatchKeyspacesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_keyspacepb_f0be7b63ff329f0c, []int{3}
}
func (m *WatchKeyspacesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchKeyspacesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchKeyspacesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WatchKeyspacesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchKeyspacesRequest.Merge(dst, src)
}
func (m *WatchKeyspacesRequest) XXX_Size() int {
	return m.Size()
}
func (m *WatchKeyspacesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchKeyspacesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WatchKeyspacesRequest proto.InternalMessageInfo

func (m *WatchKeyspacesRequest) GetHeader() *pdpb.RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type WatchKeyspacesResponse struct {
	Header               *pdpb.ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Keyspaces            []*KeyspaceMeta      `protobuf:"bytes,2,rep,name=keyspaces" json:"keyspaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *WatchKeyspacesResponse) Reset()         { *m = WatchKeyspacesResponse{} }
func (m *WatchKeyspacesResponse) String() string { return proto.CompactTextString(m) }
func (*WatchKeyspacesResponse) ProtoMessage()    {}
func (*WatchKeyspacesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_keyspacepb_f0be7b63ff329f0c, []int{4}
}
func (m *WatchKeyspacesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WatchKeyspacesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WatchKeyspacesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *WatchKeyspacesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WatchKeyspacesResponse.Merge(dst, src)
}
func (m *WatchKeyspacesResponse) XXX_Size() int {
	return m.Size()
}
func (m *WatchKeyspacesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WatchKeyspacesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WatchKeyspacesResponse proto.InternalMessageInfo

func (m *WatchKeyspacesResponse) GetHeader() *pdpb.ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *WatchKeyspacesResponse) GetKeyspaces() []*KeyspaceMeta {
	if m != nil {
		return m.Keyspaces
	}
	return nil
}

type UpdateKeyspaceStateRequest struct {
	Header               *pdpb.RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Id                   uint32              `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	State                KeyspaceState       `protobuf:"varint,3,opt,name=state,proto3,enum=keyspacepb.KeyspaceState" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UpdateKeyspaceStateRequest) Reset()         { *m = UpdateKeyspaceStateRequest{} }
func (m *UpdateKeyspaceStateRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateKeyspaceStateRequest) ProtoMessage()    {}
func (*UpdateKeyspaceStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_keyspacepb_f0be7b63ff329f0c, []int{5}
}
func (m *UpdateKeyspaceStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateKeyspaceStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateKeyspaceStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateKeyspaceStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateKeyspaceStateRequest.Merge(dst, src)
}
func (m *UpdateKeyspaceStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateKeyspaceStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateKeyspaceStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateKeyspaceStateRequest proto.InternalMessageInfo

func (m *UpdateKeyspaceStateRequest) GetHeader() *pdpb.RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *UpdateKeyspaceStateRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateKeyspaceStateRequest) GetState() KeyspaceState {
	if m != nil {
		return m.State
	}
	return KeyspaceState_ENABLED
}

type UpdateKeyspaceStateResponse struct {
	Header               *pdpb.ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Keyspace             *KeyspaceMeta        `protobuf:"bytes,2,opt,name=keyspace" json:"keyspace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UpdateKeyspaceStateResponse) Reset()         { *m = UpdateKeyspaceStateResponse{} }
func (m *UpdateKeyspaceStateResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateKeyspaceStateResponse) ProtoMessage()    {}
func (*UpdateKeyspaceStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_keyspacepb_f0be7b63ff329f0c, []int{6}
}
func (m *UpdateKeyspaceStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateKeyspaceStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateKeyspaceStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *UpdateKeyspaceStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateKeyspaceStateResponse.Merge(dst, src)
}
func (m *UpdateKeyspaceStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateKeyspaceStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateKeyspaceStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateKeyspaceStateResponse proto.InternalMessageInfo

func (m *UpdateKeyspaceStateResponse) GetHeader() *pdpb.ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *UpdateKeyspaceStateResponse) GetKeyspace() *KeyspaceMeta {
	if m != nil {
		return m.Keyspace
	}
	return nil
}

type GetAllKeyspacesRequest struct {
	Header               *pdpb.RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	StartId              uint32              `protobuf:"varint,2,opt,name=start_id,json=startId,proto3" json:"start_id,omitempty"`
	Limit                uint32              `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetAllKeyspacesRequest) Reset()         { *m = GetAllKeyspacesRequest{} }
func (m *GetAllKeyspacesRequest) String() string { return proto.CompactTextString(m) }
func (*GetAllKeyspacesRequest) ProtoMessage()    {}
func (*GetAllKeyspacesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_keyspacepb_f0be7b63ff329f0c, []int{7}
}
func (m *GetAllKeyspacesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllKeyspacesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllKeyspacesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAllKeyspacesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllKeyspacesRequest.Merge(dst, src)
}
func (m *GetAllKeyspacesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAllKeyspacesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllKeyspacesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllKeyspacesRequest proto.InternalMessageInfo

func (m *GetAllKeyspacesRequest) GetHeader() *pdpb.RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetAllKeyspacesRequest) GetStartId() uint32 {
	if m != nil {
		return m.StartId
	}
	return 0
}

func (m *GetAllKeyspacesRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type GetAllKeyspacesResponse struct {
	Header               *pdpb.ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	Keyspaces            []*KeyspaceMeta      `protobuf:"bytes,2,rep,name=keyspaces" json:"keyspaces,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GetAllKeyspacesResponse) Reset()         { *m = GetAllKeyspacesResponse{} }
func (m *GetAllKeyspacesResponse) String() string { return proto.CompactTextString(m) }
func (*GetAllKeyspacesResponse) ProtoMessage()    {}
func (*GetAllKeyspacesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_keyspacepb_f0be7b63ff329f0c, []int{8}
}
func (m *GetAllKeyspacesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAllKeyspacesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAllKeyspacesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetAllKeyspacesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAllKeyspacesResponse.Merge(dst, src)
}
func (m *GetAllKeyspacesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAllKeyspacesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAllKeyspacesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAllKeyspacesResponse proto.InternalMessageInfo

func (m *GetAllKeyspacesResponse) GetHeader() *pdpb.ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *GetAllKeyspacesResponse) GetKeyspaces() []*KeyspaceMeta {
	if m != nil {
		return m.Keyspaces
	}
	return nil
}

func init() {
	proto.RegisterType((*KeyspaceMeta)(nil), "keyspacepb.KeyspaceMeta")
	proto.RegisterMapType((map[string]string)(nil), "keyspacepb.KeyspaceMeta.ConfigEntry")
	proto.RegisterType((*LoadKeyspaceRequest)(nil), "keyspacepb.LoadKeyspaceRequest")
	proto.RegisterType((*LoadKeyspaceResponse)(nil), "keyspacepb.LoadKeyspaceResponse")
	proto.RegisterType((*WatchKeyspacesRequest)(nil), "keyspacepb.WatchKeyspacesRequest")
	proto.RegisterType((*WatchKeyspacesResponse)(nil), "keyspacepb.WatchKeyspacesResponse")
	proto.RegisterType((*UpdateKeyspaceStateRequest)(nil), "keyspacepb.UpdateKeyspaceStateRequest")
	proto.RegisterType((*UpdateKeyspaceStateResponse)(nil), "keyspacepb.UpdateKeyspaceStateResponse")
	proto.RegisterType((*GetAllKeyspacesRequest)(nil), "keyspacepb.GetAllKeyspacesRequest")
	proto.RegisterType((*GetAllKeyspacesResponse)(nil), "keyspacepb.GetAllKeyspacesResponse")
	proto.RegisterEnum("keyspacepb.KeyspaceState", KeyspaceState_name, KeyspaceState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Keyspace service

type KeyspaceClient interface {
	LoadKeyspace(ctx context.Context, in *LoadKeyspaceRequest, opts ...grpc.CallOption) (*LoadKeyspaceResponse, error)
	// WatchKeyspaces first return all current keyspaces' metadata as its first response.
	// Then, it returns responses containing keyspaces that had their metadata changed.
	WatchKeyspaces(ctx context.Context, in *WatchKeyspacesRequest, opts ...grpc.CallOption) (Keyspace_WatchKeyspacesClient, error)
	UpdateKeyspaceState(ctx context.Context, in *UpdateKeyspaceStateRequest, opts ...grpc.CallOption) (*UpdateKeyspaceStateResponse, error)
	GetAllKeyspaces(ctx context.Context, in *GetAllKeyspacesRequest, opts ...grpc.CallOption) (*GetAllKeyspacesResponse, error)
}

type keyspaceClient struct {
	cc *grpc.ClientConn
}

func NewKeyspaceClient(cc *grpc.ClientConn) KeyspaceClient {
	return &keyspaceClient{cc}
}

func (c *keyspaceClient) LoadKeyspace(ctx context.Context, in *LoadKeyspaceRequest, opts ...grpc.CallOption) (*LoadKeyspaceResponse, error) {
	out := new(LoadKeyspaceResponse)
	err := c.cc.Invoke(ctx, "/keyspacepb.Keyspace/LoadKeyspace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyspaceClient) WatchKeyspaces(ctx context.Context, in *WatchKeyspacesRequest, opts ...grpc.CallOption) (Keyspace_WatchKeyspacesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Keyspace_serviceDesc.Streams[0], "/keyspacepb.Keyspace/WatchKeyspaces", opts...)
	if err != nil {
		return nil, err
	}
	x := &keyspaceWatchKeyspacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Keyspace_WatchKeyspacesClient interface {
	Recv() (*WatchKeyspacesResponse, error)
	grpc.ClientStream
}

type keyspaceWatchKeyspacesClient struct {
	grpc.ClientStream
}

func (x *keyspaceWatchKeyspacesClient) Recv() (*WatchKeyspacesResponse, error) {
	m := new(WatchKeyspacesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *keyspaceClient) UpdateKeyspaceState(ctx context.Context, in *UpdateKeyspaceStateRequest, opts ...grpc.CallOption) (*UpdateKeyspaceStateResponse, error) {
	out := new(UpdateKeyspaceStateResponse)
	err := c.cc.Invoke(ctx, "/keyspacepb.Keyspace/UpdateKeyspaceState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyspaceClient) GetAllKeyspaces(ctx context.Context, in *GetAllKeyspacesRequest, opts ...grpc.CallOption) (*GetAllKeyspacesResponse, error) {
	out := new(GetAllKeyspacesResponse)
	err := c.cc.Invoke(ctx, "/keyspacepb.Keyspace/GetAllKeyspaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Keyspace service

type KeyspaceServer interface {
	LoadKeyspace(context.Context, *LoadKeyspaceRequest) (*LoadKeyspaceResponse, error)
	// WatchKeyspaces first return all current keyspaces' metadata as its first response.
	// Then, it returns responses containing keyspaces that had their metadata changed.
	WatchKeyspaces(*WatchKeyspacesRequest, Keyspace_WatchKeyspacesServer) error
	UpdateKeyspaceState(context.Context, *UpdateKeyspaceStateRequest) (*UpdateKeyspaceStateResponse, error)
	GetAllKeyspaces(context.Context, *GetAllKeyspacesRequest) (*GetAllKeyspacesResponse, error)
}

func RegisterKeyspaceServer(s *grpc.Server, srv KeyspaceServer) {
	s.RegisterService(&_Keyspace_serviceDesc, srv)
}

func _Keyspace_LoadKeyspace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadKeyspaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyspaceServer).LoadKeyspace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keyspacepb.Keyspace/LoadKeyspace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyspaceServer).LoadKeyspace(ctx, req.(*LoadKeyspaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keyspace_WatchKeyspaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchKeyspacesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KeyspaceServer).WatchKeyspaces(m, &keyspaceWatchKeyspacesServer{stream})
}

type Keyspace_WatchKeyspacesServer interface {
	Send(*WatchKeyspacesResponse) error
	grpc.ServerStream
}

type keyspaceWatchKeyspacesServer struct {
	grpc.ServerStream
}

func (x *keyspaceWatchKeyspacesServer) Send(m *WatchKeyspacesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Keyspace_UpdateKeyspaceState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKeyspaceStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyspaceServer).UpdateKeyspaceState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keyspacepb.Keyspace/UpdateKeyspaceState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyspaceServer).UpdateKeyspaceState(ctx, req.(*UpdateKeyspaceStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keyspace_GetAllKeyspaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllKeyspacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyspaceServer).GetAllKeyspaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keyspacepb.Keyspace/GetAllKeyspaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyspaceServer).GetAllKeyspaces(ctx, req.(*GetAllKeyspacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Keyspace_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keyspacepb.Keyspace",
	HandlerType: (*KeyspaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadKeyspace",
			Handler:    _Keyspace_LoadKeyspace_Handler,
		},
		{
			MethodName: "UpdateKeyspaceState",
			Handler:    _Keyspace_UpdateKeyspaceState_Handler,
		},
		{
			MethodName: "GetAllKeyspaces",
			Handler:    _Keyspace_GetAllKeyspaces_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchKeyspaces",
			Handler:       _Keyspace_WatchKeyspaces_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "keyspacepb.proto",
}

func (m *KeyspaceMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyspaceMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintKeyspacepb(dAtA, i, uint64(m.Id))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKeyspacepb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintKeyspacepb(dAtA, i, uint64(m.State))
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintKeyspacepb(dAtA, i, uint64(m.CreatedAt))
	}
	if m.StateChangedAt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintKeyspacepb(dAtA, i, uint64(m.StateChangedAt))
	}
	if len(m.Config) > 0 {
		for k, _ := range m.Config {
			dAtA[i] = 0x3a
			i++
			v := m.Config[k]
			mapSize := 1 + len(k) + sovKeyspacepb(uint64(len(k))) + 1 + len(v) + sovKeyspacepb(uint64(len(v)))
			i = encodeVarintKeyspacepb(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintKeyspacepb(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintKeyspacepb(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LoadKeyspaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadKeyspaceRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKeyspacepb(dAtA, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKeyspacepb(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LoadKeyspaceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadKeyspaceResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKeyspacepb(dAtA, i, uint64(m.Header.Size()))
		n2, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Keyspace != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKeyspacepb(dAtA, i, uint64(m.Keyspace.Size()))
		n3, err := m.Keyspace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WatchKeyspacesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchKeyspacesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKeyspacepb(dAtA, i, uint64(m.Header.Size()))
		n4, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WatchKeyspacesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WatchKeyspacesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKeyspacepb(dAtA, i, uint64(m.Header.Size()))
		n5, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Keyspaces) > 0 {
		for _, msg := range m.Keyspaces {
			dAtA[i] = 0x12
			i++
			i = encodeVarintKeyspacepb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateKeyspaceStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateKeyspaceStateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKeyspacepb(dAtA, i, uint64(m.Header.Size()))
		n6, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintKeyspacepb(dAtA, i, uint64(m.Id))
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintKeyspacepb(dAtA, i, uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateKeyspaceStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateKeyspaceStateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKeyspacepb(dAtA, i, uint64(m.Header.Size()))
		n7, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Keyspace != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintKeyspacepb(dAtA, i, uint64(m.Keyspace.Size()))
		n8, err := m.Keyspace.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAllKeyspacesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllKeyspacesRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKeyspacepb(dAtA, i, uint64(m.Header.Size()))
		n9, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.StartId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintKeyspacepb(dAtA, i, uint64(m.StartId))
	}
	if m.Limit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintKeyspacepb(dAtA, i, uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *GetAllKeyspacesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAllKeyspacesResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintKeyspacepb(dAtA, i, uint64(m.Header.Size()))
		n10, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.Keyspaces) > 0 {
		for _, msg := range m.Keyspaces {
			dAtA[i] = 0x12
			i++
			i = encodeVarintKeyspacepb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintKeyspacepb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *KeyspaceMeta) Size() (n int) {
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovKeyspacepb(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovKeyspacepb(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovKeyspacepb(uint64(m.State))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovKeyspacepb(uint64(m.CreatedAt))
	}
	if m.StateChangedAt != 0 {
		n += 1 + sovKeyspacepb(uint64(m.StateChangedAt))
	}
	if len(m.Config) > 0 {
		for k, v := range m.Config {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovKeyspacepb(uint64(len(k))) + 1 + len(v) + sovKeyspacepb(uint64(len(v)))
			n += mapEntrySize + 1 + sovKeyspacepb(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoadKeyspaceRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovKeyspacepb(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovKeyspacepb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoadKeyspaceResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovKeyspacepb(uint64(l))
	}
	if m.Keyspace != nil {
		l = m.Keyspace.Size()
		n += 1 + l + sovKeyspacepb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WatchKeyspacesRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovKeyspacepb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WatchKeyspacesResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovKeyspacepb(uint64(l))
	}
	if len(m.Keyspaces) > 0 {
		for _, e := range m.Keyspaces {
			l = e.Size()
			n += 1 + l + sovKeyspacepb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateKeyspaceStateRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovKeyspacepb(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovKeyspacepb(uint64(m.Id))
	}
	if m.State != 0 {
		n += 1 + sovKeyspacepb(uint64(m.State))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateKeyspaceStateResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovKeyspacepb(uint64(l))
	}
	if m.Keyspace != nil {
		l = m.Keyspace.Size()
		n += 1 + l + sovKeyspacepb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllKeyspacesRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovKeyspacepb(uint64(l))
	}
	if m.StartId != 0 {
		n += 1 + sovKeyspacepb(uint64(m.StartId))
	}
	if m.Limit != 0 {
		n += 1 + sovKeyspacepb(uint64(m.Limit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetAllKeyspacesResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovKeyspacepb(uint64(l))
	}
	if len(m.Keyspaces) > 0 {
		for _, e := range m.Keyspaces {
			l = e.Size()
			n += 1 + l + sovKeyspacepb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovKeyspacepb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozKeyspacepb(x uint64) (n int) {
	return sovKeyspacepb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeyspaceMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyspacepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyspaceMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyspaceMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (KeyspaceState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateChangedAt", wireType)
			}
			m.StateChangedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StateChangedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowKeyspacepb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowKeyspacepb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthKeyspacepb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowKeyspacepb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthKeyspacepb
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipKeyspacepb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthKeyspacepb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Config[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyspacepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadKeyspaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyspacepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadKeyspaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadKeyspaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &pdpb.RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyspacepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadKeyspaceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyspacepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadKeyspaceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadKeyspaceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &pdpb.ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyspace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keyspace == nil {
				m.Keyspace = &KeyspaceMeta{}
			}
			if err := m.Keyspace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyspacepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchKeyspacesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyspacepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchKeyspacesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchKeyspacesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &pdpb.RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyspacepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WatchKeyspacesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyspacepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WatchKeyspacesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WatchKeyspacesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &pdpb.ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyspaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyspaces = append(m.Keyspaces, &KeyspaceMeta{})
			if err := m.Keyspaces[len(m.Keyspaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyspacepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateKeyspaceStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyspacepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateKeyspaceStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateKeyspaceStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &pdpb.RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (KeyspaceState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeyspacepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateKeyspaceStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyspacepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateKeyspaceStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateKeyspaceStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &pdpb.ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyspace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keyspace == nil {
				m.Keyspace = &KeyspaceMeta{}
			}
			if err := m.Keyspace.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyspacepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllKeyspacesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyspacepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllKeyspacesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllKeyspacesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &pdpb.RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartId", wireType)
			}
			m.StartId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartId |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipKeyspacepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAllKeyspacesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowKeyspacepb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAllKeyspacesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAllKeyspacesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &pdpb.ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyspaces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyspaces = append(m.Keyspaces, &KeyspaceMeta{})
			if err := m.Keyspaces[len(m.Keyspaces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipKeyspacepb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthKeyspacepb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipKeyspacepb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowKeyspacepb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowKeyspacepb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthKeyspacepb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowKeyspacepb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipKeyspacepb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthKeyspacepb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowKeyspacepb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("keyspacepb.proto", fileDescriptor_keyspacepb_f0be7b63ff329f0c) }

var fileDescriptor_keyspacepb_f0be7b63ff329f0c = []byte{
	// 643 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xee, 0xda, 0xfd, 0x49, 0x26, 0x4d, 0x6a, 0x6d, 0x43, 0x71, 0x8d, 0x08, 0xc6, 0xa0, 0x62,
	0x01, 0x72, 0x51, 0x40, 0x08, 0x10, 0x97, 0xb4, 0x89, 0xda, 0x8a, 0xfe, 0x48, 0x4e, 0x29, 0x07,
	0x90, 0xaa, 0x6d, 0xbc, 0x24, 0x56, 0xd2, 0xd8, 0xd8, 0xdb, 0x48, 0xe5, 0x00, 0x42, 0xe2, 0xc4,
	0x13, 0xf0, 0x02, 0x48, 0x3c, 0x0a, 0x47, 0x8e, 0x1c, 0x51, 0x78, 0x11, 0xe4, 0xb5, 0x9d, 0x3a,
	0xc1, 0x29, 0x22, 0x48, 0x3d, 0x65, 0x66, 0xf6, 0xdb, 0x6f, 0xe7, 0x9b, 0x9f, 0x18, 0xa4, 0x36,
	0x3d, 0xf5, 0x5d, 0xd2, 0xa0, 0xee, 0x91, 0xe1, 0x7a, 0x0e, 0x73, 0x30, 0x9c, 0x45, 0x14, 0x70,
	0xad, 0x38, 0xae, 0x14, 0x9b, 0x4e, 0xd3, 0xe1, 0xe6, 0x6a, 0x60, 0x45, 0xd1, 0x05, 0xef, 0xc4,
	0x67, 0xdc, 0x0c, 0x03, 0xda, 0x17, 0x01, 0xe6, 0x9f, 0x45, 0x0c, 0x3b, 0x94, 0x11, 0x5c, 0x00,
	0xc1, 0xb6, 0x64, 0xa4, 0x22, 0x3d, 0x6f, 0x0a, 0xb6, 0x85, 0x31, 0x4c, 0x77, 0xc9, 0x31, 0x95,
	0x05, 0x15, 0xe9, 0x59, 0x93, 0xdb, 0x78, 0x15, 0x66, 0x7c, 0x46, 0x18, 0x95, 0x45, 0x15, 0xe9,
	0x85, 0xf2, 0xb2, 0x91, 0xc8, 0x2a, 0x26, 0xab, 0x07, 0x00, 0x33, 0xc4, 0xe1, 0xab, 0x00, 0x0d,
	0x8f, 0x12, 0x46, 0xad, 0x43, 0xc2, 0xe4, 0x69, 0x15, 0xe9, 0xa2, 0x99, 0x8d, 0x22, 0x15, 0x86,
	0x75, 0x90, 0x38, 0xee, 0xb0, 0xd1, 0x22, 0xdd, 0x66, 0x08, 0x9a, 0xe1, 0xa0, 0x02, 0x8f, 0xaf,
	0x87, 0xe1, 0x0a, 0xc3, 0x4f, 0x61, 0xb6, 0xe1, 0x74, 0x5f, 0xdb, 0x4d, 0x79, 0x4e, 0x15, 0xf5,
	0x5c, 0xf9, 0x66, 0xda, 0xd3, 0x81, 0x0e, 0x63, 0x9d, 0xc3, 0x6a, 0x5d, 0xe6, 0x9d, 0x9a, 0xd1,
	0x1d, 0xe5, 0x31, 0xe4, 0x12, 0x61, 0x2c, 0x81, 0xd8, 0xa6, 0xa7, 0x5c, 0x6b, 0xd6, 0x0c, 0x4c,
	0x5c, 0x84, 0x99, 0x1e, 0xe9, 0x9c, 0xc4, 0x6a, 0x43, 0xe7, 0x89, 0xf0, 0x08, 0x69, 0x07, 0xb0,
	0xb8, 0xed, 0x10, 0x2b, 0x7e, 0xc2, 0xa4, 0x6f, 0x4e, 0xa8, 0xcf, 0xf0, 0x1d, 0x98, 0x6d, 0x51,
	0x62, 0x51, 0x8f, 0xb3, 0xe4, 0xca, 0x8b, 0x06, 0x6f, 0x41, 0x74, 0xbc, 0xc9, 0x8f, 0xcc, 0x08,
	0x92, 0x56, 0x4a, 0xed, 0x2d, 0x14, 0x87, 0x79, 0x7d, 0xd7, 0xe9, 0xfa, 0x14, 0xdf, 0x1d, 0x21,
	0x2e, 0xc6, 0xc4, 0xe1, 0xf9, 0x08, 0xf3, 0x03, 0xc8, 0xc4, 0x75, 0xe0, 0xec, 0xb9, 0xb2, 0x3c,
	0xae, 0x30, 0xe6, 0x00, 0xa9, 0x55, 0xe1, 0xd2, 0x0b, 0xc2, 0x1a, 0xad, 0xf8, 0xd8, 0x9f, 0x44,
	0x95, 0xf6, 0x0e, 0x96, 0x46, 0x59, 0x26, 0xd2, 0xf0, 0x10, 0xb2, 0x71, 0x66, 0xbe, 0x2c, 0xf0,
	0xee, 0x8e, 0x17, 0x71, 0x06, 0xd5, 0x3e, 0x21, 0x50, 0x9e, 0xbb, 0x16, 0x61, 0x74, 0x78, 0xf4,
	0x26, 0xe9, 0x50, 0x38, 0xfc, 0xc2, 0x60, 0xf8, 0xff, 0x75, 0xd0, 0xb5, 0x0f, 0x08, 0xae, 0xa4,
	0x26, 0x73, 0x81, 0x6d, 0xed, 0xc1, 0xd2, 0x06, 0x65, 0x95, 0x4e, 0xe7, 0xbf, 0xfa, 0x8a, 0x97,
	0x21, 0xe3, 0x33, 0xe2, 0xb1, 0xc3, 0x41, 0x45, 0xe6, 0xb8, 0xbf, 0x65, 0x05, 0x6b, 0xd2, 0xb1,
	0x8f, 0x6d, 0xc6, 0xcb, 0x92, 0x37, 0x43, 0x47, 0x7b, 0x0f, 0x97, 0xff, 0x78, 0xf7, 0x22, 0x27,
	0xe1, 0xf6, 0x06, 0xe4, 0x87, 0xaa, 0x8e, 0x73, 0x30, 0x57, 0xdb, 0xad, 0xac, 0x6d, 0xd7, 0xaa,
	0xd2, 0x14, 0x9e, 0x87, 0x4c, 0x75, 0xab, 0x1e, 0x7a, 0x28, 0xf0, 0x2a, 0xe6, 0xfa, 0xe6, 0xd6,
	0x41, 0xad, 0x2a, 0x09, 0x38, 0x0f, 0xd9, 0xfd, 0xbd, 0x9d, 0xb5, 0xfa, 0xfe, 0xde, 0x6e, 0x4d,
	0x12, 0xcb, 0x1f, 0x45, 0xc8, 0xc4, 0x4c, 0xb8, 0x0e, 0xf3, 0xc9, 0x0d, 0xc5, 0xd7, 0x92, 0xa9,
	0xa4, 0xfc, 0x27, 0x28, 0xea, 0x78, 0x40, 0x28, 0x57, 0x9b, 0xc2, 0x2f, 0xa1, 0x30, 0xbc, 0x34,
	0xf8, 0x7a, 0xf2, 0x56, 0xea, 0x5a, 0x2a, 0xda, 0x79, 0x90, 0x98, 0xfa, 0x1e, 0xc2, 0x2d, 0x58,
	0x4c, 0x99, 0x41, 0xbc, 0x92, 0xbc, 0x3e, 0x7e, 0x63, 0x94, 0x5b, 0x7f, 0xc5, 0x0d, 0x64, 0xbc,
	0x82, 0x85, 0x91, 0x96, 0xe3, 0xa1, 0x24, 0xd3, 0xe7, 0x50, 0xb9, 0x71, 0x2e, 0x26, 0x66, 0x5f,
	0x5b, 0xf9, 0xf1, 0x35, 0x83, 0xbe, 0xf5, 0x4b, 0xe8, 0x7b, 0xbf, 0x84, 0x7e, 0xf6, 0x4b, 0xe8,
	0xf3, 0xaf, 0xd2, 0x14, 0x48, 0x8e, 0xd7, 0x34, 0x98, 0xdd, 0xee, 0x19, 0xed, 0x1e, 0xff, 0x86,
	0x1d, 0xcd, 0xf2, 0x9f, 0xfb, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xde, 0x1b, 0x21, 0x95, 0x1d,
	0x07, 0x00, 0x00,
}
