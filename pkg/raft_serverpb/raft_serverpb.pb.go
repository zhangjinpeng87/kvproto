// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: raft_serverpb.proto

package raft_serverpb

import (
	"fmt"
	"io"
	"math"

	proto "github.com/golang/protobuf/proto"
	disk_usage "github.com/pingcap/kvproto/pkg/disk_usage"

	encryptionpb "github.com/pingcap/kvproto/pkg/encryptionpb"

	eraftpb "github.com/pingcap/kvproto/pkg/eraftpb"

	kvrpcpb "github.com/pingcap/kvproto/pkg/kvrpcpb"

	metapb "github.com/pingcap/kvproto/pkg/metapb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PeerState int32

const (
	PeerState_Normal    PeerState = 0
	PeerState_Applying  PeerState = 1
	PeerState_Tombstone PeerState = 2
	PeerState_Merging   PeerState = 3
	// Currently used for witness to non-witness conversion: When a witness
	// has just become a non-witness, we need to set and persist this state,
	// so that when the service restarts before applying snapshot, we can
	// actively request snapshot when initializing this peer.
	PeerState_Unavailable PeerState = 4
)

var PeerState_name = map[int32]string{
	0: "Normal",
	1: "Applying",
	2: "Tombstone",
	3: "Merging",
	4: "Unavailable",
}
var PeerState_value = map[string]int32{
	"Normal":      0,
	"Applying":    1,
	"Tombstone":   2,
	"Merging":     3,
	"Unavailable": 4,
}

func (x PeerState) String() string {
	return proto.EnumName(PeerState_name, int32(x))
}
func (PeerState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{0}
}

type ExtraMessageType int32

const (
	ExtraMessageType_MsgRegionWakeUp           ExtraMessageType = 0
	ExtraMessageType_MsgWantRollbackMerge      ExtraMessageType = 1
	ExtraMessageType_MsgCheckStalePeer         ExtraMessageType = 2
	ExtraMessageType_MsgCheckStalePeerResponse ExtraMessageType = 3
	// If leader is going to sleep, it will send requests to all its followers
	// to make sure they all agree to sleep.
	ExtraMessageType_MsgHibernateRequest                 ExtraMessageType = 4
	ExtraMessageType_MsgHibernateResponse                ExtraMessageType = 5
	ExtraMessageType_MsgRejectRaftLogCausedByMemoryUsage ExtraMessageType = 6
	ExtraMessageType_MsgAvailabilityRequest              ExtraMessageType = 7
	ExtraMessageType_MsgAvailabilityResponse             ExtraMessageType = 8
	ExtraMessageType_MsgVoterReplicatedIndexRequest      ExtraMessageType = 9
	ExtraMessageType_MsgVoterReplicatedIndexResponse     ExtraMessageType = 10
	// Message means that `from` is tombstone. Leader can then update removed_records.
	ExtraMessageType_MsgGcPeerRequest               ExtraMessageType = 11
	ExtraMessageType_MsgGcPeerResponse              ExtraMessageType = 12
	ExtraMessageType_MsgFlushMemtable               ExtraMessageType = 13
	ExtraMessageType_MsgRefreshBuckets              ExtraMessageType = 14
	ExtraMessageType_MsgFetchCommittedIndexRequest  ExtraMessageType = 15
	ExtraMessageType_MsgFetchCommittedIndexResponse ExtraMessageType = 16
)

var ExtraMessageType_name = map[int32]string{
	0:  "MsgRegionWakeUp",
	1:  "MsgWantRollbackMerge",
	2:  "MsgCheckStalePeer",
	3:  "MsgCheckStalePeerResponse",
	4:  "MsgHibernateRequest",
	5:  "MsgHibernateResponse",
	6:  "MsgRejectRaftLogCausedByMemoryUsage",
	7:  "MsgAvailabilityRequest",
	8:  "MsgAvailabilityResponse",
	9:  "MsgVoterReplicatedIndexRequest",
	10: "MsgVoterReplicatedIndexResponse",
	11: "MsgGcPeerRequest",
	12: "MsgGcPeerResponse",
	13: "MsgFlushMemtable",
	14: "MsgRefreshBuckets",
	15: "MsgFetchCommittedIndexRequest",
	16: "MsgFetchCommittedIndexResponse",
}
var ExtraMessageType_value = map[string]int32{
	"MsgRegionWakeUp":                     0,
	"MsgWantRollbackMerge":                1,
	"MsgCheckStalePeer":                   2,
	"MsgCheckStalePeerResponse":           3,
	"MsgHibernateRequest":                 4,
	"MsgHibernateResponse":                5,
	"MsgRejectRaftLogCausedByMemoryUsage": 6,
	"MsgAvailabilityRequest":              7,
	"MsgAvailabilityResponse":             8,
	"MsgVoterReplicatedIndexRequest":      9,
	"MsgVoterReplicatedIndexResponse":     10,
	"MsgGcPeerRequest":                    11,
	"MsgGcPeerResponse":                   12,
	"MsgFlushMemtable":                    13,
	"MsgRefreshBuckets":                   14,
	"MsgFetchCommittedIndexRequest":       15,
	"MsgFetchCommittedIndexResponse":      16,
}

func (x ExtraMessageType) String() string {
	return proto.EnumName(ExtraMessageType_name, int32(x))
}
func (ExtraMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{1}
}

type RaftMessage struct {
	RegionId    uint64              `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	FromPeer    *metapb.Peer        `protobuf:"bytes,2,opt,name=from_peer,json=fromPeer" json:"from_peer,omitempty"`
	ToPeer      *metapb.Peer        `protobuf:"bytes,3,opt,name=to_peer,json=toPeer" json:"to_peer,omitempty"`
	Message     *eraftpb.Message    `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	RegionEpoch *metapb.RegionEpoch `protobuf:"bytes,5,opt,name=region_epoch,json=regionEpoch" json:"region_epoch,omitempty"`
	// true means to_peer is a tombstone peer and it should remove itself.
	IsTombstone bool `protobuf:"varint,6,opt,name=is_tombstone,json=isTombstone,proto3" json:"is_tombstone,omitempty"`
	// Region key range [start_key, end_key).
	StartKey []byte `protobuf:"bytes,7,opt,name=start_key,json=startKey,proto3" json:"start_key,omitempty"`
	EndKey   []byte `protobuf:"bytes,8,opt,name=end_key,json=endKey,proto3" json:"end_key,omitempty"`
	// If it has value, to_peer should be removed if merge is never going to complete.
	MergeTarget          *metapb.Region       `protobuf:"bytes,9,opt,name=merge_target,json=mergeTarget" json:"merge_target,omitempty"`
	ExtraMsg             *ExtraMessage        `protobuf:"bytes,10,opt,name=extra_msg,json=extraMsg" json:"extra_msg,omitempty"`
	ExtraCtx             []byte               `protobuf:"bytes,11,opt,name=extra_ctx,json=extraCtx,proto3" json:"extra_ctx,omitempty"`
	DiskUsage            disk_usage.DiskUsage `protobuf:"varint,12,opt,name=disk_usage,json=diskUsage,proto3,enum=disk_usage.DiskUsage" json:"disk_usage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RaftMessage) Reset()         { *m = RaftMessage{} }
func (m *RaftMessage) String() string { return proto.CompactTextString(m) }
func (*RaftMessage) ProtoMessage()    {}
func (*RaftMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{0}
}
func (m *RaftMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RaftMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftMessage.Merge(dst, src)
}
func (m *RaftMessage) XXX_Size() int {
	return m.Size()
}
func (m *RaftMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RaftMessage proto.InternalMessageInfo

func (m *RaftMessage) GetRegionId() uint64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *RaftMessage) GetFromPeer() *metapb.Peer {
	if m != nil {
		return m.FromPeer
	}
	return nil
}

func (m *RaftMessage) GetToPeer() *metapb.Peer {
	if m != nil {
		return m.ToPeer
	}
	return nil
}

func (m *RaftMessage) GetMessage() *eraftpb.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *RaftMessage) GetRegionEpoch() *metapb.RegionEpoch {
	if m != nil {
		return m.RegionEpoch
	}
	return nil
}

func (m *RaftMessage) GetIsTombstone() bool {
	if m != nil {
		return m.IsTombstone
	}
	return false
}

func (m *RaftMessage) GetStartKey() []byte {
	if m != nil {
		return m.StartKey
	}
	return nil
}

func (m *RaftMessage) GetEndKey() []byte {
	if m != nil {
		return m.EndKey
	}
	return nil
}

func (m *RaftMessage) GetMergeTarget() *metapb.Region {
	if m != nil {
		return m.MergeTarget
	}
	return nil
}

func (m *RaftMessage) GetExtraMsg() *ExtraMessage {
	if m != nil {
		return m.ExtraMsg
	}
	return nil
}

func (m *RaftMessage) GetExtraCtx() []byte {
	if m != nil {
		return m.ExtraCtx
	}
	return nil
}

func (m *RaftMessage) GetDiskUsage() disk_usage.DiskUsage {
	if m != nil {
		return m.DiskUsage
	}
	return disk_usage.DiskUsage_Normal
}

type RaftTruncatedState struct {
	Index                uint64   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Term                 uint64   `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RaftTruncatedState) Reset()         { *m = RaftTruncatedState{} }
func (m *RaftTruncatedState) String() string { return proto.CompactTextString(m) }
func (*RaftTruncatedState) ProtoMessage()    {}
func (*RaftTruncatedState) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{1}
}
func (m *RaftTruncatedState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftTruncatedState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftTruncatedState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RaftTruncatedState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftTruncatedState.Merge(dst, src)
}
func (m *RaftTruncatedState) XXX_Size() int {
	return m.Size()
}
func (m *RaftTruncatedState) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftTruncatedState.DiscardUnknown(m)
}

var xxx_messageInfo_RaftTruncatedState proto.InternalMessageInfo

func (m *RaftTruncatedState) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *RaftTruncatedState) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

type SnapshotCFFile struct {
	Cf                   string   `protobuf:"bytes,1,opt,name=cf,proto3" json:"cf,omitempty"`
	Size_                uint64   `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Checksum             uint32   `protobuf:"varint,3,opt,name=checksum,proto3" json:"checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotCFFile) Reset()         { *m = SnapshotCFFile{} }
func (m *SnapshotCFFile) String() string { return proto.CompactTextString(m) }
func (*SnapshotCFFile) ProtoMessage()    {}
func (*SnapshotCFFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{2}
}
func (m *SnapshotCFFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotCFFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotCFFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SnapshotCFFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotCFFile.Merge(dst, src)
}
func (m *SnapshotCFFile) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotCFFile) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotCFFile.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotCFFile proto.InternalMessageInfo

func (m *SnapshotCFFile) GetCf() string {
	if m != nil {
		return m.Cf
	}
	return ""
}

func (m *SnapshotCFFile) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *SnapshotCFFile) GetChecksum() uint32 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

type SnapshotMeta struct {
	CfFiles []*SnapshotCFFile `protobuf:"bytes,1,rep,name=cf_files,json=cfFiles" json:"cf_files,omitempty"`
	// true means this snapshot is triggered for load balance
	ForBalance bool `protobuf:"varint,2,opt,name=for_balance,json=forBalance,proto3" json:"for_balance,omitempty"`
	// true means this is an empty snapshot for witness
	ForWitness bool `protobuf:"varint,3,opt,name=for_witness,json=forWitness,proto3" json:"for_witness,omitempty"`
	// the timestamp second to generate snapshot
	Start uint64 `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	// the duration of generating snapshot
	GenerateDurationSec uint64 `protobuf:"varint,5,opt,name=generate_duration_sec,json=generateDurationSec,proto3" json:"generate_duration_sec,omitempty"`
	// the path of the tablet snapshot, it should only be used for v1 to receive
	// snapshot from v2
	TabletSnapPath string `protobuf:"bytes,6,opt,name=tablet_snap_path,json=tabletSnapPath,proto3" json:"tablet_snap_path,omitempty"`
	// A hint of the latest commit index on leader when sending snapshot.
	// It should only be used for v2 to send snapshot to v1.
	// See https://github.com/pingcap/tiflash/issues/7568
	CommitIndexHint      uint64   `protobuf:"varint,7,opt,name=commit_index_hint,json=commitIndexHint,proto3" json:"commit_index_hint,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SnapshotMeta) Reset()         { *m = SnapshotMeta{} }
func (m *SnapshotMeta) String() string { return proto.CompactTextString(m) }
func (*SnapshotMeta) ProtoMessage()    {}
func (*SnapshotMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{3}
}
func (m *SnapshotMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SnapshotMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotMeta.Merge(dst, src)
}
func (m *SnapshotMeta) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotMeta.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotMeta proto.InternalMessageInfo

func (m *SnapshotMeta) GetCfFiles() []*SnapshotCFFile {
	if m != nil {
		return m.CfFiles
	}
	return nil
}

func (m *SnapshotMeta) GetForBalance() bool {
	if m != nil {
		return m.ForBalance
	}
	return false
}

func (m *SnapshotMeta) GetForWitness() bool {
	if m != nil {
		return m.ForWitness
	}
	return false
}

func (m *SnapshotMeta) GetStart() uint64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *SnapshotMeta) GetGenerateDurationSec() uint64 {
	if m != nil {
		return m.GenerateDurationSec
	}
	return 0
}

func (m *SnapshotMeta) GetTabletSnapPath() string {
	if m != nil {
		return m.TabletSnapPath
	}
	return ""
}

func (m *SnapshotMeta) GetCommitIndexHint() uint64 {
	if m != nil {
		return m.CommitIndexHint
	}
	return 0
}

type SnapshotChunk struct {
	Message              *RaftMessage `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Data                 []byte       `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SnapshotChunk) Reset()         { *m = SnapshotChunk{} }
func (m *SnapshotChunk) String() string { return proto.CompactTextString(m) }
func (*SnapshotChunk) ProtoMessage()    {}
func (*SnapshotChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{4}
}
func (m *SnapshotChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SnapshotChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotChunk.Merge(dst, src)
}
func (m *SnapshotChunk) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotChunk.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotChunk proto.InternalMessageInfo

func (m *SnapshotChunk) GetMessage() *RaftMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *SnapshotChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Done struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Done) Reset()         { *m = Done{} }
func (m *Done) String() string { return proto.CompactTextString(m) }
func (*Done) ProtoMessage()    {}
func (*Done) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{5}
}
func (m *Done) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Done) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Done.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Done) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Done.Merge(dst, src)
}
func (m *Done) XXX_Size() int {
	return m.Size()
}
func (m *Done) XXX_DiscardUnknown() {
	xxx_messageInfo_Done.DiscardUnknown(m)
}

var xxx_messageInfo_Done proto.InternalMessageInfo

type TabletSnapshotFileMeta struct {
	FileSize uint64 `protobuf:"varint,1,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	FileName string `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	// Some block data. Unencrypted.
	HeadChunk []byte `protobuf:"bytes,3,opt,name=head_chunk,json=headChunk,proto3" json:"head_chunk,omitempty"`
	// trailing data including checksum. Unencrypted.
	TrailingChunk        []byte   `protobuf:"bytes,4,opt,name=trailing_chunk,json=trailingChunk,proto3" json:"trailing_chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TabletSnapshotFileMeta) Reset()         { *m = TabletSnapshotFileMeta{} }
func (m *TabletSnapshotFileMeta) String() string { return proto.CompactTextString(m) }
func (*TabletSnapshotFileMeta) ProtoMessage()    {}
func (*TabletSnapshotFileMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{6}
}
func (m *TabletSnapshotFileMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TabletSnapshotFileMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TabletSnapshotFileMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TabletSnapshotFileMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TabletSnapshotFileMeta.Merge(dst, src)
}
func (m *TabletSnapshotFileMeta) XXX_Size() int {
	return m.Size()
}
func (m *TabletSnapshotFileMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_TabletSnapshotFileMeta.DiscardUnknown(m)
}

var xxx_messageInfo_TabletSnapshotFileMeta proto.InternalMessageInfo

func (m *TabletSnapshotFileMeta) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *TabletSnapshotFileMeta) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *TabletSnapshotFileMeta) GetHeadChunk() []byte {
	if m != nil {
		return m.HeadChunk
	}
	return nil
}

func (m *TabletSnapshotFileMeta) GetTrailingChunk() []byte {
	if m != nil {
		return m.TrailingChunk
	}
	return nil
}

// Snapshot preview for server to decide whether skip some files.
// Server should send back an `AcceptedSnapshotFile` to let client
// keep sending specified files. Only SST files can be skipped, all
// other files should always be sent.
type TabletSnapshotPreview struct {
	Metas []*TabletSnapshotFileMeta `protobuf:"bytes,1,rep,name=metas" json:"metas,omitempty"`
	// There may be too many metas, use a flag to indicate all metas
	// are sent.
	End                  bool     `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TabletSnapshotPreview) Reset()         { *m = TabletSnapshotPreview{} }
func (m *TabletSnapshotPreview) String() string { return proto.CompactTextString(m) }
func (*TabletSnapshotPreview) ProtoMessage()    {}
func (*TabletSnapshotPreview) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{7}
}
func (m *TabletSnapshotPreview) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TabletSnapshotPreview) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TabletSnapshotPreview.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TabletSnapshotPreview) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TabletSnapshotPreview.Merge(dst, src)
}
func (m *TabletSnapshotPreview) XXX_Size() int {
	return m.Size()
}
func (m *TabletSnapshotPreview) XXX_DiscardUnknown() {
	xxx_messageInfo_TabletSnapshotPreview.DiscardUnknown(m)
}

var xxx_messageInfo_TabletSnapshotPreview proto.InternalMessageInfo

func (m *TabletSnapshotPreview) GetMetas() []*TabletSnapshotFileMeta {
	if m != nil {
		return m.Metas
	}
	return nil
}

func (m *TabletSnapshotPreview) GetEnd() bool {
	if m != nil {
		return m.End
	}
	return false
}

type TabletSnapshotFileChunk struct {
	FileSize uint64 `protobuf:"varint,1,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	FileName string `protobuf:"bytes,2,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	// Encrypted.
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	// Initial vector if encryption is enabled.
	Iv                   []byte                `protobuf:"bytes,4,opt,name=iv,proto3" json:"iv,omitempty"`
	Key                  *encryptionpb.DataKey `protobuf:"bytes,5,opt,name=key" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TabletSnapshotFileChunk) Reset()         { *m = TabletSnapshotFileChunk{} }
func (m *TabletSnapshotFileChunk) String() string { return proto.CompactTextString(m) }
func (*TabletSnapshotFileChunk) ProtoMessage()    {}
func (*TabletSnapshotFileChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{8}
}
func (m *TabletSnapshotFileChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TabletSnapshotFileChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TabletSnapshotFileChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TabletSnapshotFileChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TabletSnapshotFileChunk.Merge(dst, src)
}
func (m *TabletSnapshotFileChunk) XXX_Size() int {
	return m.Size()
}
func (m *TabletSnapshotFileChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_TabletSnapshotFileChunk.DiscardUnknown(m)
}

var xxx_messageInfo_TabletSnapshotFileChunk proto.InternalMessageInfo

func (m *TabletSnapshotFileChunk) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *TabletSnapshotFileChunk) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *TabletSnapshotFileChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *TabletSnapshotFileChunk) GetIv() []byte {
	if m != nil {
		return m.Iv
	}
	return nil
}

func (m *TabletSnapshotFileChunk) GetKey() *encryptionpb.DataKey {
	if m != nil {
		return m.Key
	}
	return nil
}

type TabletSnapshotHead struct {
	Message              *RaftMessage `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	UseCache             bool         `protobuf:"varint,2,opt,name=use_cache,json=useCache,proto3" json:"use_cache,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *TabletSnapshotHead) Reset()         { *m = TabletSnapshotHead{} }
func (m *TabletSnapshotHead) String() string { return proto.CompactTextString(m) }
func (*TabletSnapshotHead) ProtoMessage()    {}
func (*TabletSnapshotHead) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{9}
}
func (m *TabletSnapshotHead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TabletSnapshotHead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TabletSnapshotHead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TabletSnapshotHead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TabletSnapshotHead.Merge(dst, src)
}
func (m *TabletSnapshotHead) XXX_Size() int {
	return m.Size()
}
func (m *TabletSnapshotHead) XXX_DiscardUnknown() {
	xxx_messageInfo_TabletSnapshotHead.DiscardUnknown(m)
}

var xxx_messageInfo_TabletSnapshotHead proto.InternalMessageInfo

func (m *TabletSnapshotHead) GetMessage() *RaftMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *TabletSnapshotHead) GetUseCache() bool {
	if m != nil {
		return m.UseCache
	}
	return false
}

type TabletSnapshotEnd struct {
	// Checksum of all data sent in `TabletSnapshotFileChunk.data` and
	// `TabletSnapshotFileChunk.file_name`.
	Checksum             uint64   `protobuf:"varint,1,opt,name=checksum,proto3" json:"checksum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TabletSnapshotEnd) Reset()         { *m = TabletSnapshotEnd{} }
func (m *TabletSnapshotEnd) String() string { return proto.CompactTextString(m) }
func (*TabletSnapshotEnd) ProtoMessage()    {}
func (*TabletSnapshotEnd) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{10}
}
func (m *TabletSnapshotEnd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TabletSnapshotEnd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TabletSnapshotEnd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TabletSnapshotEnd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TabletSnapshotEnd.Merge(dst, src)
}
func (m *TabletSnapshotEnd) XXX_Size() int {
	return m.Size()
}
func (m *TabletSnapshotEnd) XXX_DiscardUnknown() {
	xxx_messageInfo_TabletSnapshotEnd.DiscardUnknown(m)
}

var xxx_messageInfo_TabletSnapshotEnd proto.InternalMessageInfo

func (m *TabletSnapshotEnd) GetChecksum() uint64 {
	if m != nil {
		return m.Checksum
	}
	return 0
}

type TabletSnapshotRequest struct {
	// Types that are valid to be assigned to Payload:
	//	*TabletSnapshotRequest_Head
	//	*TabletSnapshotRequest_Preview
	//	*TabletSnapshotRequest_Chunk
	//	*TabletSnapshotRequest_End
	Payload              isTabletSnapshotRequest_Payload `protobuf_oneof:"payload"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *TabletSnapshotRequest) Reset()         { *m = TabletSnapshotRequest{} }
func (m *TabletSnapshotRequest) String() string { return proto.CompactTextString(m) }
func (*TabletSnapshotRequest) ProtoMessage()    {}
func (*TabletSnapshotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{11}
}
func (m *TabletSnapshotRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TabletSnapshotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TabletSnapshotRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TabletSnapshotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TabletSnapshotRequest.Merge(dst, src)
}
func (m *TabletSnapshotRequest) XXX_Size() int {
	return m.Size()
}
func (m *TabletSnapshotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TabletSnapshotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TabletSnapshotRequest proto.InternalMessageInfo

type isTabletSnapshotRequest_Payload interface {
	isTabletSnapshotRequest_Payload()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TabletSnapshotRequest_Head struct {
	Head *TabletSnapshotHead `protobuf:"bytes,1,opt,name=head,oneof"`
}
type TabletSnapshotRequest_Preview struct {
	Preview *TabletSnapshotPreview `protobuf:"bytes,2,opt,name=preview,oneof"`
}
type TabletSnapshotRequest_Chunk struct {
	Chunk *TabletSnapshotFileChunk `protobuf:"bytes,3,opt,name=chunk,oneof"`
}
type TabletSnapshotRequest_End struct {
	End *TabletSnapshotEnd `protobuf:"bytes,4,opt,name=end,oneof"`
}

func (*TabletSnapshotRequest_Head) isTabletSnapshotRequest_Payload()    {}
func (*TabletSnapshotRequest_Preview) isTabletSnapshotRequest_Payload() {}
func (*TabletSnapshotRequest_Chunk) isTabletSnapshotRequest_Payload()   {}
func (*TabletSnapshotRequest_End) isTabletSnapshotRequest_Payload()     {}

func (m *TabletSnapshotRequest) GetPayload() isTabletSnapshotRequest_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *TabletSnapshotRequest) GetHead() *TabletSnapshotHead {
	if x, ok := m.GetPayload().(*TabletSnapshotRequest_Head); ok {
		return x.Head
	}
	return nil
}

func (m *TabletSnapshotRequest) GetPreview() *TabletSnapshotPreview {
	if x, ok := m.GetPayload().(*TabletSnapshotRequest_Preview); ok {
		return x.Preview
	}
	return nil
}

func (m *TabletSnapshotRequest) GetChunk() *TabletSnapshotFileChunk {
	if x, ok := m.GetPayload().(*TabletSnapshotRequest_Chunk); ok {
		return x.Chunk
	}
	return nil
}

func (m *TabletSnapshotRequest) GetEnd() *TabletSnapshotEnd {
	if x, ok := m.GetPayload().(*TabletSnapshotRequest_End); ok {
		return x.End
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*TabletSnapshotRequest) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _TabletSnapshotRequest_OneofMarshaler, _TabletSnapshotRequest_OneofUnmarshaler, _TabletSnapshotRequest_OneofSizer, []interface{}{
		(*TabletSnapshotRequest_Head)(nil),
		(*TabletSnapshotRequest_Preview)(nil),
		(*TabletSnapshotRequest_Chunk)(nil),
		(*TabletSnapshotRequest_End)(nil),
	}
}

func _TabletSnapshotRequest_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*TabletSnapshotRequest)
	// payload
	switch x := m.Payload.(type) {
	case *TabletSnapshotRequest_Head:
		_ = b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Head); err != nil {
			return err
		}
	case *TabletSnapshotRequest_Preview:
		_ = b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Preview); err != nil {
			return err
		}
	case *TabletSnapshotRequest_Chunk:
		_ = b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Chunk); err != nil {
			return err
		}
	case *TabletSnapshotRequest_End:
		_ = b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.End); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("TabletSnapshotRequest.Payload has unexpected type %T", x)
	}
	return nil
}

func _TabletSnapshotRequest_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*TabletSnapshotRequest)
	switch tag {
	case 1: // payload.head
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TabletSnapshotHead)
		err := b.DecodeMessage(msg)
		m.Payload = &TabletSnapshotRequest_Head{msg}
		return true, err
	case 2: // payload.preview
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TabletSnapshotPreview)
		err := b.DecodeMessage(msg)
		m.Payload = &TabletSnapshotRequest_Preview{msg}
		return true, err
	case 3: // payload.chunk
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TabletSnapshotFileChunk)
		err := b.DecodeMessage(msg)
		m.Payload = &TabletSnapshotRequest_Chunk{msg}
		return true, err
	case 4: // payload.end
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TabletSnapshotEnd)
		err := b.DecodeMessage(msg)
		m.Payload = &TabletSnapshotRequest_End{msg}
		return true, err
	default:
		return false, nil
	}
}

func _TabletSnapshotRequest_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*TabletSnapshotRequest)
	// payload
	switch x := m.Payload.(type) {
	case *TabletSnapshotRequest_Head:
		s := proto.Size(x.Head)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TabletSnapshotRequest_Preview:
		s := proto.Size(x.Preview)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TabletSnapshotRequest_Chunk:
		s := proto.Size(x.Chunk)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *TabletSnapshotRequest_End:
		s := proto.Size(x.End)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type AcceptedSnapshotFiles struct {
	FileName             []string `protobuf:"bytes,1,rep,name=file_name,json=fileName" json:"file_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AcceptedSnapshotFiles) Reset()         { *m = AcceptedSnapshotFiles{} }
func (m *AcceptedSnapshotFiles) String() string { return proto.CompactTextString(m) }
func (*AcceptedSnapshotFiles) ProtoMessage()    {}
func (*AcceptedSnapshotFiles) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{12}
}
func (m *AcceptedSnapshotFiles) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcceptedSnapshotFiles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcceptedSnapshotFiles.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AcceptedSnapshotFiles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcceptedSnapshotFiles.Merge(dst, src)
}
func (m *AcceptedSnapshotFiles) XXX_Size() int {
	return m.Size()
}
func (m *AcceptedSnapshotFiles) XXX_DiscardUnknown() {
	xxx_messageInfo_AcceptedSnapshotFiles.DiscardUnknown(m)
}

var xxx_messageInfo_AcceptedSnapshotFiles proto.InternalMessageInfo

func (m *AcceptedSnapshotFiles) GetFileName() []string {
	if m != nil {
		return m.FileName
	}
	return nil
}

type TabletSnapshotResponse struct {
	Files                *AcceptedSnapshotFiles `protobuf:"bytes,1,opt,name=files" json:"files,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *TabletSnapshotResponse) Reset()         { *m = TabletSnapshotResponse{} }
func (m *TabletSnapshotResponse) String() string { return proto.CompactTextString(m) }
func (*TabletSnapshotResponse) ProtoMessage()    {}
func (*TabletSnapshotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{13}
}
func (m *TabletSnapshotResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TabletSnapshotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TabletSnapshotResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *TabletSnapshotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TabletSnapshotResponse.Merge(dst, src)
}
func (m *TabletSnapshotResponse) XXX_Size() int {
	return m.Size()
}
func (m *TabletSnapshotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TabletSnapshotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TabletSnapshotResponse proto.InternalMessageInfo

func (m *TabletSnapshotResponse) GetFiles() *AcceptedSnapshotFiles {
	if m != nil {
		return m.Files
	}
	return nil
}

type KeyValue struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyValue) Reset()         { *m = KeyValue{} }
func (m *KeyValue) String() string { return proto.CompactTextString(m) }
func (*KeyValue) ProtoMessage()    {}
func (*KeyValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{14}
}
func (m *KeyValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *KeyValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValue.Merge(dst, src)
}
func (m *KeyValue) XXX_Size() int {
	return m.Size()
}
func (m *KeyValue) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValue.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValue proto.InternalMessageInfo

func (m *KeyValue) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyValue) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type RaftSnapshotData struct {
	Region               *metapb.Region  `protobuf:"bytes,1,opt,name=region" json:"region,omitempty"`
	FileSize             uint64          `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Data                 []*KeyValue     `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
	Version              uint64          `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Meta                 *SnapshotMeta   `protobuf:"bytes,5,opt,name=meta" json:"meta,omitempty"`
	RemovedRecords       []*metapb.Peer  `protobuf:"bytes,6,rep,name=removed_records,json=removedRecords" json:"removed_records,omitempty"`
	MergedRecords        []*MergedRecord `protobuf:"bytes,7,rep,name=merged_records,json=mergedRecords" json:"merged_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RaftSnapshotData) Reset()         { *m = RaftSnapshotData{} }
func (m *RaftSnapshotData) String() string { return proto.CompactTextString(m) }
func (*RaftSnapshotData) ProtoMessage()    {}
func (*RaftSnapshotData) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{15}
}
func (m *RaftSnapshotData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftSnapshotData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftSnapshotData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RaftSnapshotData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftSnapshotData.Merge(dst, src)
}
func (m *RaftSnapshotData) XXX_Size() int {
	return m.Size()
}
func (m *RaftSnapshotData) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftSnapshotData.DiscardUnknown(m)
}

var xxx_messageInfo_RaftSnapshotData proto.InternalMessageInfo

func (m *RaftSnapshotData) GetRegion() *metapb.Region {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *RaftSnapshotData) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *RaftSnapshotData) GetData() []*KeyValue {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RaftSnapshotData) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RaftSnapshotData) GetMeta() *SnapshotMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *RaftSnapshotData) GetRemovedRecords() []*metapb.Peer {
	if m != nil {
		return m.RemovedRecords
	}
	return nil
}

func (m *RaftSnapshotData) GetMergedRecords() []*MergedRecord {
	if m != nil {
		return m.MergedRecords
	}
	return nil
}

type StoreIdent struct {
	ClusterId            uint64             `protobuf:"varint,1,opt,name=cluster_id,json=clusterId,proto3" json:"cluster_id,omitempty"`
	StoreId              uint64             `protobuf:"varint,2,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	ApiVersion           kvrpcpb.APIVersion `protobuf:"varint,3,opt,name=api_version,json=apiVersion,proto3,enum=kvrpcpb.APIVersion" json:"api_version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *StoreIdent) Reset()         { *m = StoreIdent{} }
func (m *StoreIdent) String() string { return proto.CompactTextString(m) }
func (*StoreIdent) ProtoMessage()    {}
func (*StoreIdent) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{16}
}
func (m *StoreIdent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreIdent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreIdent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StoreIdent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreIdent.Merge(dst, src)
}
func (m *StoreIdent) XXX_Size() int {
	return m.Size()
}
func (m *StoreIdent) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreIdent.DiscardUnknown(m)
}

var xxx_messageInfo_StoreIdent proto.InternalMessageInfo

func (m *StoreIdent) GetClusterId() uint64 {
	if m != nil {
		return m.ClusterId
	}
	return 0
}

func (m *StoreIdent) GetStoreId() uint64 {
	if m != nil {
		return m.StoreId
	}
	return 0
}

func (m *StoreIdent) GetApiVersion() kvrpcpb.APIVersion {
	if m != nil {
		return m.ApiVersion
	}
	return kvrpcpb.APIVersion_V1
}

type StoreRecoverState struct {
	// Used for TiKV start recovery when WAL of KVDB was disabled.
	// TiKV may read all relations between seqno and raft log index, and replay
	// all raft logs which corresponding seqno smaller than the seqno here.
	// After TiKV replays all raft logs and flushed KV data, the seqno here must
	// be updated.
	Seqno                uint64   `protobuf:"varint,1,opt,name=seqno,proto3" json:"seqno,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StoreRecoverState) Reset()         { *m = StoreRecoverState{} }
func (m *StoreRecoverState) String() string { return proto.CompactTextString(m) }
func (*StoreRecoverState) ProtoMessage()    {}
func (*StoreRecoverState) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{17}
}
func (m *StoreRecoverState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreRecoverState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreRecoverState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *StoreRecoverState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreRecoverState.Merge(dst, src)
}
func (m *StoreRecoverState) XXX_Size() int {
	return m.Size()
}
func (m *StoreRecoverState) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreRecoverState.DiscardUnknown(m)
}

var xxx_messageInfo_StoreRecoverState proto.InternalMessageInfo

func (m *StoreRecoverState) GetSeqno() uint64 {
	if m != nil {
		return m.Seqno
	}
	return 0
}

type RaftLocalState struct {
	HardState            *eraftpb.HardState `protobuf:"bytes,1,opt,name=hard_state,json=hardState" json:"hard_state,omitempty"`
	LastIndex            uint64             `protobuf:"varint,2,opt,name=last_index,json=lastIndex,proto3" json:"last_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RaftLocalState) Reset()         { *m = RaftLocalState{} }
func (m *RaftLocalState) String() string { return proto.CompactTextString(m) }
func (*RaftLocalState) ProtoMessage()    {}
func (*RaftLocalState) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{18}
}
func (m *RaftLocalState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftLocalState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftLocalState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RaftLocalState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftLocalState.Merge(dst, src)
}
func (m *RaftLocalState) XXX_Size() int {
	return m.Size()
}
func (m *RaftLocalState) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftLocalState.DiscardUnknown(m)
}

var xxx_messageInfo_RaftLocalState proto.InternalMessageInfo

func (m *RaftLocalState) GetHardState() *eraftpb.HardState {
	if m != nil {
		return m.HardState
	}
	return nil
}

func (m *RaftLocalState) GetLastIndex() uint64 {
	if m != nil {
		return m.LastIndex
	}
	return 0
}

type RaftApplyState struct {
	AppliedIndex         uint64              `protobuf:"varint,1,opt,name=applied_index,json=appliedIndex,proto3" json:"applied_index,omitempty"`
	LastCommitIndex      uint64              `protobuf:"varint,3,opt,name=last_commit_index,json=lastCommitIndex,proto3" json:"last_commit_index,omitempty"`
	CommitIndex          uint64              `protobuf:"varint,4,opt,name=commit_index,json=commitIndex,proto3" json:"commit_index,omitempty"`
	CommitTerm           uint64              `protobuf:"varint,5,opt,name=commit_term,json=commitTerm,proto3" json:"commit_term,omitempty"`
	TruncatedState       *RaftTruncatedState `protobuf:"bytes,2,opt,name=truncated_state,json=truncatedState" json:"truncated_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *RaftApplyState) Reset()         { *m = RaftApplyState{} }
func (m *RaftApplyState) String() string { return proto.CompactTextString(m) }
func (*RaftApplyState) ProtoMessage()    {}
func (*RaftApplyState) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{19}
}
func (m *RaftApplyState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftApplyState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftApplyState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RaftApplyState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftApplyState.Merge(dst, src)
}
func (m *RaftApplyState) XXX_Size() int {
	return m.Size()
}
func (m *RaftApplyState) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftApplyState.DiscardUnknown(m)
}

var xxx_messageInfo_RaftApplyState proto.InternalMessageInfo

func (m *RaftApplyState) GetAppliedIndex() uint64 {
	if m != nil {
		return m.AppliedIndex
	}
	return 0
}

func (m *RaftApplyState) GetLastCommitIndex() uint64 {
	if m != nil {
		return m.LastCommitIndex
	}
	return 0
}

func (m *RaftApplyState) GetCommitIndex() uint64 {
	if m != nil {
		return m.CommitIndex
	}
	return 0
}

func (m *RaftApplyState) GetCommitTerm() uint64 {
	if m != nil {
		return m.CommitTerm
	}
	return 0
}

func (m *RaftApplyState) GetTruncatedState() *RaftTruncatedState {
	if m != nil {
		return m.TruncatedState
	}
	return nil
}

type MergeState struct {
	MinIndex             uint64         `protobuf:"varint,1,opt,name=min_index,json=minIndex,proto3" json:"min_index,omitempty"`
	Target               *metapb.Region `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
	Commit               uint64         `protobuf:"varint,3,opt,name=commit,proto3" json:"commit,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MergeState) Reset()         { *m = MergeState{} }
func (m *MergeState) String() string { return proto.CompactTextString(m) }
func (*MergeState) ProtoMessage()    {}
func (*MergeState) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{20}
}
func (m *MergeState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MergeState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MergeState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MergeState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MergeState.Merge(dst, src)
}
func (m *MergeState) XXX_Size() int {
	return m.Size()
}
func (m *MergeState) XXX_DiscardUnknown() {
	xxx_messageInfo_MergeState.DiscardUnknown(m)
}

var xxx_messageInfo_MergeState proto.InternalMessageInfo

func (m *MergeState) GetMinIndex() uint64 {
	if m != nil {
		return m.MinIndex
	}
	return 0
}

func (m *MergeState) GetTarget() *metapb.Region {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *MergeState) GetCommit() uint64 {
	if m != nil {
		return m.Commit
	}
	return 0
}

type MergedRecord struct {
	SourceRegionId uint64              `protobuf:"varint,1,opt,name=source_region_id,json=sourceRegionId,proto3" json:"source_region_id,omitempty"`
	SourceEpoch    *metapb.RegionEpoch `protobuf:"bytes,2,opt,name=source_epoch,json=sourceEpoch" json:"source_epoch,omitempty"`
	// Peers of source region when merge is committed.
	SourcePeers []*metapb.Peer `protobuf:"bytes,3,rep,name=source_peers,json=sourcePeers" json:"source_peers,omitempty"`
	// Removed peers (by confchange) of source region when merge is committed.
	SourceRemovedRecords []*metapb.Peer      `protobuf:"bytes,9,rep,name=source_removed_records,json=sourceRemovedRecords" json:"source_removed_records,omitempty"`
	TargetRegionId       uint64              `protobuf:"varint,4,opt,name=target_region_id,json=targetRegionId,proto3" json:"target_region_id,omitempty"`
	TargetEpoch          *metapb.RegionEpoch `protobuf:"bytes,5,opt,name=target_epoch,json=targetEpoch" json:"target_epoch,omitempty"`
	TargetPeers          []*metapb.Peer      `protobuf:"bytes,6,rep,name=target_peers,json=targetPeers" json:"target_peers,omitempty"`
	// Commit merge index.
	Index uint64 `protobuf:"varint,7,opt,name=index,proto3" json:"index,omitempty"`
	// Prepare merge index.
	SourceIndex          uint64   `protobuf:"varint,8,opt,name=source_index,json=sourceIndex,proto3" json:"source_index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MergedRecord) Reset()         { *m = MergedRecord{} }
func (m *MergedRecord) String() string { return proto.CompactTextString(m) }
func (*MergedRecord) ProtoMessage()    {}
func (*MergedRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{21}
}
func (m *MergedRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MergedRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MergedRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MergedRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MergedRecord.Merge(dst, src)
}
func (m *MergedRecord) XXX_Size() int {
	return m.Size()
}
func (m *MergedRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_MergedRecord.DiscardUnknown(m)
}

var xxx_messageInfo_MergedRecord proto.InternalMessageInfo

func (m *MergedRecord) GetSourceRegionId() uint64 {
	if m != nil {
		return m.SourceRegionId
	}
	return 0
}

func (m *MergedRecord) GetSourceEpoch() *metapb.RegionEpoch {
	if m != nil {
		return m.SourceEpoch
	}
	return nil
}

func (m *MergedRecord) GetSourcePeers() []*metapb.Peer {
	if m != nil {
		return m.SourcePeers
	}
	return nil
}

func (m *MergedRecord) GetSourceRemovedRecords() []*metapb.Peer {
	if m != nil {
		return m.SourceRemovedRecords
	}
	return nil
}

func (m *MergedRecord) GetTargetRegionId() uint64 {
	if m != nil {
		return m.TargetRegionId
	}
	return 0
}

func (m *MergedRecord) GetTargetEpoch() *metapb.RegionEpoch {
	if m != nil {
		return m.TargetEpoch
	}
	return nil
}

func (m *MergedRecord) GetTargetPeers() []*metapb.Peer {
	if m != nil {
		return m.TargetPeers
	}
	return nil
}

func (m *MergedRecord) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *MergedRecord) GetSourceIndex() uint64 {
	if m != nil {
		return m.SourceIndex
	}
	return 0
}

type RegionLocalState struct {
	State      PeerState      `protobuf:"varint,1,opt,name=state,proto3,enum=raft_serverpb.PeerState" json:"state,omitempty"`
	Region     *metapb.Region `protobuf:"bytes,2,opt,name=region" json:"region,omitempty"`
	MergeState *MergeState    `protobuf:"bytes,3,opt,name=merge_state,json=mergeState" json:"merge_state,omitempty"`
	// The apply index corresponding to the storage when it's initialized.
	TabletIndex uint64 `protobuf:"varint,4,opt,name=tablet_index,json=tabletIndex,proto3" json:"tablet_index,omitempty"`
	// Raft doesn't guarantee peer will be removed in the end. In v1, peer finds
	// out its destiny by logs or broadcast; in v2, leader is responsible to
	// ensure removed peers are destroyed.
	// Note: only peers who has been part of this region can be in this list.
	RemovedRecords []*metapb.Peer `protobuf:"bytes,5,rep,name=removed_records,json=removedRecords" json:"removed_records,omitempty"`
	// Merged peer can't be deleted like gc peers. Instead, leader needs to
	// query target peer to decide whether source peer can be destroyed.
	MergedRecords        []*MergedRecord `protobuf:"bytes,6,rep,name=merged_records,json=mergedRecords" json:"merged_records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RegionLocalState) Reset()         { *m = RegionLocalState{} }
func (m *RegionLocalState) String() string { return proto.CompactTextString(m) }
func (*RegionLocalState) ProtoMessage()    {}
func (*RegionLocalState) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{22}
}
func (m *RegionLocalState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionLocalState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionLocalState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegionLocalState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionLocalState.Merge(dst, src)
}
func (m *RegionLocalState) XXX_Size() int {
	return m.Size()
}
func (m *RegionLocalState) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionLocalState.DiscardUnknown(m)
}

var xxx_messageInfo_RegionLocalState proto.InternalMessageInfo

func (m *RegionLocalState) GetState() PeerState {
	if m != nil {
		return m.State
	}
	return PeerState_Normal
}

func (m *RegionLocalState) GetRegion() *metapb.Region {
	if m != nil {
		return m.Region
	}
	return nil
}

func (m *RegionLocalState) GetMergeState() *MergeState {
	if m != nil {
		return m.MergeState
	}
	return nil
}

func (m *RegionLocalState) GetTabletIndex() uint64 {
	if m != nil {
		return m.TabletIndex
	}
	return 0
}

func (m *RegionLocalState) GetRemovedRecords() []*metapb.Peer {
	if m != nil {
		return m.RemovedRecords
	}
	return nil
}

func (m *RegionLocalState) GetMergedRecords() []*MergedRecord {
	if m != nil {
		return m.MergedRecords
	}
	return nil
}

type RegionSequenceNumberRelation struct {
	RegionId             uint64            `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	SequenceNumber       uint64            `protobuf:"varint,2,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	ApplyState           *RaftApplyState   `protobuf:"bytes,3,opt,name=apply_state,json=applyState" json:"apply_state,omitempty"`
	RegionState          *RegionLocalState `protobuf:"bytes,4,opt,name=region_state,json=regionState" json:"region_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *RegionSequenceNumberRelation) Reset()         { *m = RegionSequenceNumberRelation{} }
func (m *RegionSequenceNumberRelation) String() string { return proto.CompactTextString(m) }
func (*RegionSequenceNumberRelation) ProtoMessage()    {}
func (*RegionSequenceNumberRelation) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{23}
}
func (m *RegionSequenceNumberRelation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegionSequenceNumberRelation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegionSequenceNumberRelation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RegionSequenceNumberRelation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegionSequenceNumberRelation.Merge(dst, src)
}
func (m *RegionSequenceNumberRelation) XXX_Size() int {
	return m.Size()
}
func (m *RegionSequenceNumberRelation) XXX_DiscardUnknown() {
	xxx_messageInfo_RegionSequenceNumberRelation.DiscardUnknown(m)
}

var xxx_messageInfo_RegionSequenceNumberRelation proto.InternalMessageInfo

func (m *RegionSequenceNumberRelation) GetRegionId() uint64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *RegionSequenceNumberRelation) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func (m *RegionSequenceNumberRelation) GetApplyState() *RaftApplyState {
	if m != nil {
		return m.ApplyState
	}
	return nil
}

func (m *RegionSequenceNumberRelation) GetRegionState() *RegionLocalState {
	if m != nil {
		return m.RegionState
	}
	return nil
}

type AvailabilityContext struct {
	FromRegionId         uint64              `protobuf:"varint,1,opt,name=from_region_id,json=fromRegionId,proto3" json:"from_region_id,omitempty"`
	FromRegionEpoch      *metapb.RegionEpoch `protobuf:"bytes,2,opt,name=from_region_epoch,json=fromRegionEpoch" json:"from_region_epoch,omitempty"`
	Unavailable          bool                `protobuf:"varint,3,opt,name=unavailable,proto3" json:"unavailable,omitempty"`
	Trimmed              bool                `protobuf:"varint,4,opt,name=trimmed,proto3" json:"trimmed,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *AvailabilityContext) Reset()         { *m = AvailabilityContext{} }
func (m *AvailabilityContext) String() string { return proto.CompactTextString(m) }
func (*AvailabilityContext) ProtoMessage()    {}
func (*AvailabilityContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{24}
}
func (m *AvailabilityContext) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AvailabilityContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AvailabilityContext.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *AvailabilityContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AvailabilityContext.Merge(dst, src)
}
func (m *AvailabilityContext) XXX_Size() int {
	return m.Size()
}
func (m *AvailabilityContext) XXX_DiscardUnknown() {
	xxx_messageInfo_AvailabilityContext.DiscardUnknown(m)
}

var xxx_messageInfo_AvailabilityContext proto.InternalMessageInfo

func (m *AvailabilityContext) GetFromRegionId() uint64 {
	if m != nil {
		return m.FromRegionId
	}
	return 0
}

func (m *AvailabilityContext) GetFromRegionEpoch() *metapb.RegionEpoch {
	if m != nil {
		return m.FromRegionEpoch
	}
	return nil
}

func (m *AvailabilityContext) GetUnavailable() bool {
	if m != nil {
		return m.Unavailable
	}
	return false
}

func (m *AvailabilityContext) GetTrimmed() bool {
	if m != nil {
		return m.Trimmed
	}
	return false
}

type FlushMemtable struct {
	RegionId             uint64   `protobuf:"varint,1,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlushMemtable) Reset()         { *m = FlushMemtable{} }
func (m *FlushMemtable) String() string { return proto.CompactTextString(m) }
func (*FlushMemtable) ProtoMessage()    {}
func (*FlushMemtable) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{25}
}
func (m *FlushMemtable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FlushMemtable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FlushMemtable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *FlushMemtable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlushMemtable.Merge(dst, src)
}
func (m *FlushMemtable) XXX_Size() int {
	return m.Size()
}
func (m *FlushMemtable) XXX_DiscardUnknown() {
	xxx_messageInfo_FlushMemtable.DiscardUnknown(m)
}

var xxx_messageInfo_FlushMemtable proto.InternalMessageInfo

func (m *FlushMemtable) GetRegionId() uint64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

type RefreshBuckets struct {
	Version              uint64   `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Keys                 [][]byte `protobuf:"bytes,2,rep,name=keys" json:"keys,omitempty"`
	Sizes                []uint64 `protobuf:"varint,3,rep,packed,name=sizes" json:"sizes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RefreshBuckets) Reset()         { *m = RefreshBuckets{} }
func (m *RefreshBuckets) String() string { return proto.CompactTextString(m) }
func (*RefreshBuckets) ProtoMessage()    {}
func (*RefreshBuckets) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{26}
}
func (m *RefreshBuckets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RefreshBuckets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RefreshBuckets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RefreshBuckets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RefreshBuckets.Merge(dst, src)
}
func (m *RefreshBuckets) XXX_Size() int {
	return m.Size()
}
func (m *RefreshBuckets) XXX_DiscardUnknown() {
	xxx_messageInfo_RefreshBuckets.DiscardUnknown(m)
}

var xxx_messageInfo_RefreshBuckets proto.InternalMessageInfo

func (m *RefreshBuckets) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *RefreshBuckets) GetKeys() [][]byte {
	if m != nil {
		return m.Keys
	}
	return nil
}

func (m *RefreshBuckets) GetSizes() []uint64 {
	if m != nil {
		return m.Sizes
	}
	return nil
}

type CheckGcPeer struct {
	// The region ID who triggers the check and wait for report. It should be
	// the ID of RaftMessage.from.
	FromRegionId uint64 `protobuf:"varint,1,opt,name=from_region_id,json=fromRegionId,proto3" json:"from_region_id,omitempty"`
	// The region ID to be checked if should be destroyed.
	CheckRegionId uint64 `protobuf:"varint,2,opt,name=check_region_id,json=checkRegionId,proto3" json:"check_region_id,omitempty"`
	// The epoch of the region to be checked.
	CheckRegionEpoch *metapb.RegionEpoch `protobuf:"bytes,3,opt,name=check_region_epoch,json=checkRegionEpoch" json:"check_region_epoch,omitempty"`
	// The peer to be checked.
	CheckPeer            *metapb.Peer `protobuf:"bytes,4,opt,name=check_peer,json=checkPeer" json:"check_peer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *CheckGcPeer) Reset()         { *m = CheckGcPeer{} }
func (m *CheckGcPeer) String() string { return proto.CompactTextString(m) }
func (*CheckGcPeer) ProtoMessage()    {}
func (*CheckGcPeer) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{27}
}
func (m *CheckGcPeer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckGcPeer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckGcPeer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *CheckGcPeer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckGcPeer.Merge(dst, src)
}
func (m *CheckGcPeer) XXX_Size() int {
	return m.Size()
}
func (m *CheckGcPeer) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckGcPeer.DiscardUnknown(m)
}

var xxx_messageInfo_CheckGcPeer proto.InternalMessageInfo

func (m *CheckGcPeer) GetFromRegionId() uint64 {
	if m != nil {
		return m.FromRegionId
	}
	return 0
}

func (m *CheckGcPeer) GetCheckRegionId() uint64 {
	if m != nil {
		return m.CheckRegionId
	}
	return 0
}

func (m *CheckGcPeer) GetCheckRegionEpoch() *metapb.RegionEpoch {
	if m != nil {
		return m.CheckRegionEpoch
	}
	return nil
}

func (m *CheckGcPeer) GetCheckPeer() *metapb.Peer {
	if m != nil {
		return m.CheckPeer
	}
	return nil
}

type ExtraMessage struct {
	Type ExtraMessageType `protobuf:"varint,1,opt,name=type,proto3,enum=raft_serverpb.ExtraMessageType" json:"type,omitempty"`
	// It's merge related index. In `WantRollbackMerge`, it's prepare merge index. In
	// `MsgGcPeerRequest`, it's the commit merge index. In `MsgVoterReplicatedIndexRequest`
	// it's the voter_replicated_index.
	Index uint64 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	// In `MsgCheckStalePeerResponse`, it's the peers that receiver can continue to query.
	CheckPeers []*metapb.Peer `protobuf:"bytes,3,rep,name=check_peers,json=checkPeers" json:"check_peers,omitempty"`
	WaitData   bool           `protobuf:"varint,4,opt,name=wait_data,json=waitData,proto3" json:"wait_data,omitempty"`
	// Flag for forcely wake up hibernate regions if true.
	ForcelyAwaken bool           `protobuf:"varint,5,opt,name=forcely_awaken,json=forcelyAwaken,proto3" json:"forcely_awaken,omitempty"`
	CheckGcPeer   *CheckGcPeer   `protobuf:"bytes,6,opt,name=check_gc_peer,json=checkGcPeer" json:"check_gc_peer,omitempty"`
	FlushMemtable *FlushMemtable `protobuf:"bytes,7,opt,name=flush_memtable,json=flushMemtable" json:"flush_memtable,omitempty"`
	// Used by `MsgAvailabilityRequest` and `MsgAvailabilityResponse` in v2.
	AvailabilityContext *AvailabilityContext `protobuf:"bytes,8,opt,name=availability_context,json=availabilityContext" json:"availability_context,omitempty"`
	// notice the peer to refresh buckets version
	RefreshBuckets       *RefreshBuckets `protobuf:"bytes,9,opt,name=refresh_buckets,json=refreshBuckets" json:"refresh_buckets,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ExtraMessage) Reset()         { *m = ExtraMessage{} }
func (m *ExtraMessage) String() string { return proto.CompactTextString(m) }
func (*ExtraMessage) ProtoMessage()    {}
func (*ExtraMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_raft_serverpb_afa94b902b12588e, []int{28}
}
func (m *ExtraMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExtraMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExtraMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ExtraMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExtraMessage.Merge(dst, src)
}
func (m *ExtraMessage) XXX_Size() int {
	return m.Size()
}
func (m *ExtraMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ExtraMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ExtraMessage proto.InternalMessageInfo

func (m *ExtraMessage) GetType() ExtraMessageType {
	if m != nil {
		return m.Type
	}
	return ExtraMessageType_MsgRegionWakeUp
}

func (m *ExtraMessage) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ExtraMessage) GetCheckPeers() []*metapb.Peer {
	if m != nil {
		return m.CheckPeers
	}
	return nil
}

func (m *ExtraMessage) GetWaitData() bool {
	if m != nil {
		return m.WaitData
	}
	return false
}

func (m *ExtraMessage) GetForcelyAwaken() bool {
	if m != nil {
		return m.ForcelyAwaken
	}
	return false
}

func (m *ExtraMessage) GetCheckGcPeer() *CheckGcPeer {
	if m != nil {
		return m.CheckGcPeer
	}
	return nil
}

func (m *ExtraMessage) GetFlushMemtable() *FlushMemtable {
	if m != nil {
		return m.FlushMemtable
	}
	return nil
}

func (m *ExtraMessage) GetAvailabilityContext() *AvailabilityContext {
	if m != nil {
		return m.AvailabilityContext
	}
	return nil
}

func (m *ExtraMessage) GetRefreshBuckets() *RefreshBuckets {
	if m != nil {
		return m.RefreshBuckets
	}
	return nil
}

func init() {
	proto.RegisterType((*RaftMessage)(nil), "raft_serverpb.RaftMessage")
	proto.RegisterType((*RaftTruncatedState)(nil), "raft_serverpb.RaftTruncatedState")
	proto.RegisterType((*SnapshotCFFile)(nil), "raft_serverpb.SnapshotCFFile")
	proto.RegisterType((*SnapshotMeta)(nil), "raft_serverpb.SnapshotMeta")
	proto.RegisterType((*SnapshotChunk)(nil), "raft_serverpb.SnapshotChunk")
	proto.RegisterType((*Done)(nil), "raft_serverpb.Done")
	proto.RegisterType((*TabletSnapshotFileMeta)(nil), "raft_serverpb.TabletSnapshotFileMeta")
	proto.RegisterType((*TabletSnapshotPreview)(nil), "raft_serverpb.TabletSnapshotPreview")
	proto.RegisterType((*TabletSnapshotFileChunk)(nil), "raft_serverpb.TabletSnapshotFileChunk")
	proto.RegisterType((*TabletSnapshotHead)(nil), "raft_serverpb.TabletSnapshotHead")
	proto.RegisterType((*TabletSnapshotEnd)(nil), "raft_serverpb.TabletSnapshotEnd")
	proto.RegisterType((*TabletSnapshotRequest)(nil), "raft_serverpb.TabletSnapshotRequest")
	proto.RegisterType((*AcceptedSnapshotFiles)(nil), "raft_serverpb.AcceptedSnapshotFiles")
	proto.RegisterType((*TabletSnapshotResponse)(nil), "raft_serverpb.TabletSnapshotResponse")
	proto.RegisterType((*KeyValue)(nil), "raft_serverpb.KeyValue")
	proto.RegisterType((*RaftSnapshotData)(nil), "raft_serverpb.RaftSnapshotData")
	proto.RegisterType((*StoreIdent)(nil), "raft_serverpb.StoreIdent")
	proto.RegisterType((*StoreRecoverState)(nil), "raft_serverpb.StoreRecoverState")
	proto.RegisterType((*RaftLocalState)(nil), "raft_serverpb.RaftLocalState")
	proto.RegisterType((*RaftApplyState)(nil), "raft_serverpb.RaftApplyState")
	proto.RegisterType((*MergeState)(nil), "raft_serverpb.MergeState")
	proto.RegisterType((*MergedRecord)(nil), "raft_serverpb.MergedRecord")
	proto.RegisterType((*RegionLocalState)(nil), "raft_serverpb.RegionLocalState")
	proto.RegisterType((*RegionSequenceNumberRelation)(nil), "raft_serverpb.RegionSequenceNumberRelation")
	proto.RegisterType((*AvailabilityContext)(nil), "raft_serverpb.AvailabilityContext")
	proto.RegisterType((*FlushMemtable)(nil), "raft_serverpb.FlushMemtable")
	proto.RegisterType((*RefreshBuckets)(nil), "raft_serverpb.RefreshBuckets")
	proto.RegisterType((*CheckGcPeer)(nil), "raft_serverpb.CheckGcPeer")
	proto.RegisterType((*ExtraMessage)(nil), "raft_serverpb.ExtraMessage")
	proto.RegisterEnum("raft_serverpb.PeerState", PeerState_name, PeerState_value)
	proto.RegisterEnum("raft_serverpb.ExtraMessageType", ExtraMessageType_name, ExtraMessageType_value)
}
func (m *RaftMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RegionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.RegionId))
	}
	if m.FromPeer != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.FromPeer.Size()))
		n1, err := m.FromPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.ToPeer != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.ToPeer.Size()))
		n2, err := m.ToPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Message != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Message.Size()))
		n3, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.RegionEpoch != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.RegionEpoch.Size()))
		n4, err := m.RegionEpoch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.IsTombstone {
		dAtA[i] = 0x30
		i++
		if m.IsTombstone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.StartKey) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(len(m.StartKey)))
		i += copy(dAtA[i:], m.StartKey)
	}
	if len(m.EndKey) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(len(m.EndKey)))
		i += copy(dAtA[i:], m.EndKey)
	}
	if m.MergeTarget != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.MergeTarget.Size()))
		n5, err := m.MergeTarget.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.ExtraMsg != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.ExtraMsg.Size()))
		n6, err := m.ExtraMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.ExtraCtx) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(len(m.ExtraCtx)))
		i += copy(dAtA[i:], m.ExtraCtx)
	}
	if m.DiskUsage != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.DiskUsage))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RaftTruncatedState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftTruncatedState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Index))
	}
	if m.Term != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Term))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SnapshotCFFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotCFFile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Cf) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(len(m.Cf)))
		i += copy(dAtA[i:], m.Cf)
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Size_))
	}
	if m.Checksum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Checksum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SnapshotMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.CfFiles) > 0 {
		for _, msg := range m.CfFiles {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRaftServerpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.ForBalance {
		dAtA[i] = 0x10
		i++
		if m.ForBalance {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ForWitness {
		dAtA[i] = 0x18
		i++
		if m.ForWitness {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Start != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Start))
	}
	if m.GenerateDurationSec != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.GenerateDurationSec))
	}
	if len(m.TabletSnapPath) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(len(m.TabletSnapPath)))
		i += copy(dAtA[i:], m.TabletSnapPath)
	}
	if m.CommitIndexHint != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.CommitIndexHint))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SnapshotChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotChunk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Message.Size()))
		n7, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Done) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Done) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TabletSnapshotFileMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TabletSnapshotFileMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FileSize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.FileSize))
	}
	if len(m.FileName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(len(m.FileName)))
		i += copy(dAtA[i:], m.FileName)
	}
	if len(m.HeadChunk) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(len(m.HeadChunk)))
		i += copy(dAtA[i:], m.HeadChunk)
	}
	if len(m.TrailingChunk) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(len(m.TrailingChunk)))
		i += copy(dAtA[i:], m.TrailingChunk)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TabletSnapshotPreview) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TabletSnapshotPreview) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Metas) > 0 {
		for _, msg := range m.Metas {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRaftServerpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.End {
		dAtA[i] = 0x10
		i++
		if m.End {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TabletSnapshotFileChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TabletSnapshotFileChunk) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FileSize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.FileSize))
	}
	if len(m.FileName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(len(m.FileName)))
		i += copy(dAtA[i:], m.FileName)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Iv) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(len(m.Iv)))
		i += copy(dAtA[i:], m.Iv)
	}
	if m.Key != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Key.Size()))
		n8, err := m.Key.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TabletSnapshotHead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TabletSnapshotHead) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Message != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Message.Size()))
		n9, err := m.Message.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.UseCache {
		dAtA[i] = 0x10
		i++
		if m.UseCache {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TabletSnapshotEnd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TabletSnapshotEnd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Checksum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Checksum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TabletSnapshotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TabletSnapshotRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		nn10, err := m.Payload.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += nn10
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TabletSnapshotRequest_Head) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Head != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Head.Size()))
		n11, err := m.Head.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}
func (m *TabletSnapshotRequest_Preview) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Preview != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Preview.Size()))
		n12, err := m.Preview.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	return i, nil
}
func (m *TabletSnapshotRequest_Chunk) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.Chunk != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Chunk.Size()))
		n13, err := m.Chunk.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	return i, nil
}
func (m *TabletSnapshotRequest_End) MarshalTo(dAtA []byte) (int, error) {
	i := 0
	if m.End != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.End.Size()))
		n14, err := m.End.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}
func (m *AcceptedSnapshotFiles) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcceptedSnapshotFiles) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FileName) > 0 {
		for _, s := range m.FileName {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *TabletSnapshotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TabletSnapshotResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Files != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Files.Size()))
		n15, err := m.Files.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KeyValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyValue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RaftSnapshotData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftSnapshotData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Region != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Region.Size()))
		n16, err := m.Region.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if m.FileSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.FileSize))
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRaftServerpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Version != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Version))
	}
	if m.Meta != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Meta.Size()))
		n17, err := m.Meta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	if len(m.RemovedRecords) > 0 {
		for _, msg := range m.RemovedRecords {
			dAtA[i] = 0x32
			i++
			i = encodeVarintRaftServerpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MergedRecords) > 0 {
		for _, msg := range m.MergedRecords {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintRaftServerpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StoreIdent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreIdent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ClusterId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.ClusterId))
	}
	if m.StoreId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.StoreId))
	}
	if m.ApiVersion != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.ApiVersion))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StoreRecoverState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreRecoverState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seqno != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Seqno))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RaftLocalState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftLocalState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.HardState != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.HardState.Size()))
		n18, err := m.HardState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if m.LastIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.LastIndex))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RaftApplyState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftApplyState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppliedIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.AppliedIndex))
	}
	if m.TruncatedState != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.TruncatedState.Size()))
		n19, err := m.TruncatedState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n19
	}
	if m.LastCommitIndex != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.LastCommitIndex))
	}
	if m.CommitIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.CommitIndex))
	}
	if m.CommitTerm != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.CommitTerm))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MergeState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MergeState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MinIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.MinIndex))
	}
	if m.Target != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Target.Size()))
		n20, err := m.Target.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n20
	}
	if m.Commit != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Commit))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *MergedRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MergedRecord) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.SourceRegionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.SourceRegionId))
	}
	if m.SourceEpoch != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.SourceEpoch.Size()))
		n21, err := m.SourceEpoch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if len(m.SourcePeers) > 0 {
		for _, msg := range m.SourcePeers {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRaftServerpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.TargetRegionId != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.TargetRegionId))
	}
	if m.TargetEpoch != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.TargetEpoch.Size()))
		n22, err := m.TargetEpoch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if len(m.TargetPeers) > 0 {
		for _, msg := range m.TargetPeers {
			dAtA[i] = 0x32
			i++
			i = encodeVarintRaftServerpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Index != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Index))
	}
	if m.SourceIndex != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.SourceIndex))
	}
	if len(m.SourceRemovedRecords) > 0 {
		for _, msg := range m.SourceRemovedRecords {
			dAtA[i] = 0x4a
			i++
			i = encodeVarintRaftServerpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RegionLocalState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionLocalState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.State))
	}
	if m.Region != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Region.Size()))
		n23, err := m.Region.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if m.MergeState != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.MergeState.Size()))
		n24, err := m.MergeState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	if m.TabletIndex != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.TabletIndex))
	}
	if len(m.RemovedRecords) > 0 {
		for _, msg := range m.RemovedRecords {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintRaftServerpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.MergedRecords) > 0 {
		for _, msg := range m.MergedRecords {
			dAtA[i] = 0x32
			i++
			i = encodeVarintRaftServerpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RegionSequenceNumberRelation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegionSequenceNumberRelation) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RegionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.RegionId))
	}
	if m.SequenceNumber != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.SequenceNumber))
	}
	if m.ApplyState != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.ApplyState.Size()))
		n25, err := m.ApplyState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.RegionState != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.RegionState.Size()))
		n26, err := m.RegionState.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *AvailabilityContext) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AvailabilityContext) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromRegionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.FromRegionId))
	}
	if m.FromRegionEpoch != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.FromRegionEpoch.Size()))
		n27, err := m.FromRegionEpoch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if m.Unavailable {
		dAtA[i] = 0x18
		i++
		if m.Unavailable {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Trimmed {
		dAtA[i] = 0x20
		i++
		if m.Trimmed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *FlushMemtable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushMemtable) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RegionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.RegionId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RefreshBuckets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RefreshBuckets) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Version))
	}
	if len(m.Keys) > 0 {
		for _, b := range m.Keys {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRaftServerpb(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	if len(m.Sizes) > 0 {
		dAtA29 := make([]byte, len(m.Sizes)*10)
		var j28 int
		for _, num := range m.Sizes {
			for num >= 1<<7 {
				dAtA29[j28] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j28++
			}
			dAtA29[j28] = uint8(num)
			j28++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(j28))
		i += copy(dAtA[i:], dAtA29[:j28])
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CheckGcPeer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckGcPeer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.FromRegionId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.FromRegionId))
	}
	if m.CheckRegionId != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.CheckRegionId))
	}
	if m.CheckRegionEpoch != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.CheckRegionEpoch.Size()))
		n30, err := m.CheckRegionEpoch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if m.CheckPeer != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.CheckPeer.Size()))
		n31, err := m.CheckPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ExtraMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExtraMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Type))
	}
	if m.Index != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.Index))
	}
	if len(m.CheckPeers) > 0 {
		for _, msg := range m.CheckPeers {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRaftServerpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.WaitData {
		dAtA[i] = 0x20
		i++
		if m.WaitData {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.ForcelyAwaken {
		dAtA[i] = 0x28
		i++
		if m.ForcelyAwaken {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.CheckGcPeer != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.CheckGcPeer.Size()))
		n32, err := m.CheckGcPeer.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.FlushMemtable != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.FlushMemtable.Size()))
		n33, err := m.FlushMemtable.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if m.AvailabilityContext != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.AvailabilityContext.Size()))
		n34, err := m.AvailabilityContext.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	if m.RefreshBuckets != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintRaftServerpb(dAtA, i, uint64(m.RefreshBuckets.Size()))
		n35, err := m.RefreshBuckets.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRaftServerpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RaftMessage) Size() (n int) {
	var l int
	_ = l
	if m.RegionId != 0 {
		n += 1 + sovRaftServerpb(uint64(m.RegionId))
	}
	if m.FromPeer != nil {
		l = m.FromPeer.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.ToPeer != nil {
		l = m.ToPeer.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.RegionEpoch != nil {
		l = m.RegionEpoch.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.IsTombstone {
		n += 2
	}
	l = len(m.StartKey)
	if l > 0 {
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	l = len(m.EndKey)
	if l > 0 {
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.MergeTarget != nil {
		l = m.MergeTarget.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.ExtraMsg != nil {
		l = m.ExtraMsg.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	l = len(m.ExtraCtx)
	if l > 0 {
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.DiskUsage != 0 {
		n += 1 + sovRaftServerpb(uint64(m.DiskUsage))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RaftTruncatedState) Size() (n int) {
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovRaftServerpb(uint64(m.Index))
	}
	if m.Term != 0 {
		n += 1 + sovRaftServerpb(uint64(m.Term))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotCFFile) Size() (n int) {
	var l int
	_ = l
	l = len(m.Cf)
	if l > 0 {
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovRaftServerpb(uint64(m.Size_))
	}
	if m.Checksum != 0 {
		n += 1 + sovRaftServerpb(uint64(m.Checksum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotMeta) Size() (n int) {
	var l int
	_ = l
	if len(m.CfFiles) > 0 {
		for _, e := range m.CfFiles {
			l = e.Size()
			n += 1 + l + sovRaftServerpb(uint64(l))
		}
	}
	if m.ForBalance {
		n += 2
	}
	if m.ForWitness {
		n += 2
	}
	if m.Start != 0 {
		n += 1 + sovRaftServerpb(uint64(m.Start))
	}
	if m.GenerateDurationSec != 0 {
		n += 1 + sovRaftServerpb(uint64(m.GenerateDurationSec))
	}
	l = len(m.TabletSnapPath)
	if l > 0 {
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.CommitIndexHint != 0 {
		n += 1 + sovRaftServerpb(uint64(m.CommitIndexHint))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotChunk) Size() (n int) {
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Done) Size() (n int) {
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TabletSnapshotFileMeta) Size() (n int) {
	var l int
	_ = l
	if m.FileSize != 0 {
		n += 1 + sovRaftServerpb(uint64(m.FileSize))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	l = len(m.HeadChunk)
	if l > 0 {
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	l = len(m.TrailingChunk)
	if l > 0 {
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TabletSnapshotPreview) Size() (n int) {
	var l int
	_ = l
	if len(m.Metas) > 0 {
		for _, e := range m.Metas {
			l = e.Size()
			n += 1 + l + sovRaftServerpb(uint64(l))
		}
	}
	if m.End {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TabletSnapshotFileChunk) Size() (n int) {
	var l int
	_ = l
	if m.FileSize != 0 {
		n += 1 + sovRaftServerpb(uint64(m.FileSize))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	l = len(m.Iv)
	if l > 0 {
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.Key != nil {
		l = m.Key.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TabletSnapshotHead) Size() (n int) {
	var l int
	_ = l
	if m.Message != nil {
		l = m.Message.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.UseCache {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TabletSnapshotEnd) Size() (n int) {
	var l int
	_ = l
	if m.Checksum != 0 {
		n += 1 + sovRaftServerpb(uint64(m.Checksum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TabletSnapshotRequest) Size() (n int) {
	var l int
	_ = l
	if m.Payload != nil {
		n += m.Payload.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TabletSnapshotRequest_Head) Size() (n int) {
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	return n
}
func (m *TabletSnapshotRequest_Preview) Size() (n int) {
	var l int
	_ = l
	if m.Preview != nil {
		l = m.Preview.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	return n
}
func (m *TabletSnapshotRequest_Chunk) Size() (n int) {
	var l int
	_ = l
	if m.Chunk != nil {
		l = m.Chunk.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	return n
}
func (m *TabletSnapshotRequest_End) Size() (n int) {
	var l int
	_ = l
	if m.End != nil {
		l = m.End.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	return n
}
func (m *AcceptedSnapshotFiles) Size() (n int) {
	var l int
	_ = l
	if len(m.FileName) > 0 {
		for _, s := range m.FileName {
			l = len(s)
			n += 1 + l + sovRaftServerpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TabletSnapshotResponse) Size() (n int) {
	var l int
	_ = l
	if m.Files != nil {
		l = m.Files.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeyValue) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RaftSnapshotData) Size() (n int) {
	var l int
	_ = l
	if m.Region != nil {
		l = m.Region.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovRaftServerpb(uint64(m.FileSize))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovRaftServerpb(uint64(l))
		}
	}
	if m.Version != 0 {
		n += 1 + sovRaftServerpb(uint64(m.Version))
	}
	if m.Meta != nil {
		l = m.Meta.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if len(m.RemovedRecords) > 0 {
		for _, e := range m.RemovedRecords {
			l = e.Size()
			n += 1 + l + sovRaftServerpb(uint64(l))
		}
	}
	if len(m.MergedRecords) > 0 {
		for _, e := range m.MergedRecords {
			l = e.Size()
			n += 1 + l + sovRaftServerpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreIdent) Size() (n int) {
	var l int
	_ = l
	if m.ClusterId != 0 {
		n += 1 + sovRaftServerpb(uint64(m.ClusterId))
	}
	if m.StoreId != 0 {
		n += 1 + sovRaftServerpb(uint64(m.StoreId))
	}
	if m.ApiVersion != 0 {
		n += 1 + sovRaftServerpb(uint64(m.ApiVersion))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreRecoverState) Size() (n int) {
	var l int
	_ = l
	if m.Seqno != 0 {
		n += 1 + sovRaftServerpb(uint64(m.Seqno))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RaftLocalState) Size() (n int) {
	var l int
	_ = l
	if m.HardState != nil {
		l = m.HardState.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.LastIndex != 0 {
		n += 1 + sovRaftServerpb(uint64(m.LastIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RaftApplyState) Size() (n int) {
	var l int
	_ = l
	if m.AppliedIndex != 0 {
		n += 1 + sovRaftServerpb(uint64(m.AppliedIndex))
	}
	if m.TruncatedState != nil {
		l = m.TruncatedState.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.LastCommitIndex != 0 {
		n += 1 + sovRaftServerpb(uint64(m.LastCommitIndex))
	}
	if m.CommitIndex != 0 {
		n += 1 + sovRaftServerpb(uint64(m.CommitIndex))
	}
	if m.CommitTerm != 0 {
		n += 1 + sovRaftServerpb(uint64(m.CommitTerm))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MergeState) Size() (n int) {
	var l int
	_ = l
	if m.MinIndex != 0 {
		n += 1 + sovRaftServerpb(uint64(m.MinIndex))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.Commit != 0 {
		n += 1 + sovRaftServerpb(uint64(m.Commit))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MergedRecord) Size() (n int) {
	var l int
	_ = l
	if m.SourceRegionId != 0 {
		n += 1 + sovRaftServerpb(uint64(m.SourceRegionId))
	}
	if m.SourceEpoch != nil {
		l = m.SourceEpoch.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if len(m.SourcePeers) > 0 {
		for _, e := range m.SourcePeers {
			l = e.Size()
			n += 1 + l + sovRaftServerpb(uint64(l))
		}
	}
	if m.TargetRegionId != 0 {
		n += 1 + sovRaftServerpb(uint64(m.TargetRegionId))
	}
	if m.TargetEpoch != nil {
		l = m.TargetEpoch.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if len(m.TargetPeers) > 0 {
		for _, e := range m.TargetPeers {
			l = e.Size()
			n += 1 + l + sovRaftServerpb(uint64(l))
		}
	}
	if m.Index != 0 {
		n += 1 + sovRaftServerpb(uint64(m.Index))
	}
	if m.SourceIndex != 0 {
		n += 1 + sovRaftServerpb(uint64(m.SourceIndex))
	}
	if len(m.SourceRemovedRecords) > 0 {
		for _, e := range m.SourceRemovedRecords {
			l = e.Size()
			n += 1 + l + sovRaftServerpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionLocalState) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovRaftServerpb(uint64(m.State))
	}
	if m.Region != nil {
		l = m.Region.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.MergeState != nil {
		l = m.MergeState.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.TabletIndex != 0 {
		n += 1 + sovRaftServerpb(uint64(m.TabletIndex))
	}
	if len(m.RemovedRecords) > 0 {
		for _, e := range m.RemovedRecords {
			l = e.Size()
			n += 1 + l + sovRaftServerpb(uint64(l))
		}
	}
	if len(m.MergedRecords) > 0 {
		for _, e := range m.MergedRecords {
			l = e.Size()
			n += 1 + l + sovRaftServerpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RegionSequenceNumberRelation) Size() (n int) {
	var l int
	_ = l
	if m.RegionId != 0 {
		n += 1 + sovRaftServerpb(uint64(m.RegionId))
	}
	if m.SequenceNumber != 0 {
		n += 1 + sovRaftServerpb(uint64(m.SequenceNumber))
	}
	if m.ApplyState != nil {
		l = m.ApplyState.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.RegionState != nil {
		l = m.RegionState.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AvailabilityContext) Size() (n int) {
	var l int
	_ = l
	if m.FromRegionId != 0 {
		n += 1 + sovRaftServerpb(uint64(m.FromRegionId))
	}
	if m.FromRegionEpoch != nil {
		l = m.FromRegionEpoch.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.Unavailable {
		n += 2
	}
	if m.Trimmed {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FlushMemtable) Size() (n int) {
	var l int
	_ = l
	if m.RegionId != 0 {
		n += 1 + sovRaftServerpb(uint64(m.RegionId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RefreshBuckets) Size() (n int) {
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovRaftServerpb(uint64(m.Version))
	}
	if len(m.Keys) > 0 {
		for _, b := range m.Keys {
			l = len(b)
			n += 1 + l + sovRaftServerpb(uint64(l))
		}
	}
	if len(m.Sizes) > 0 {
		l = 0
		for _, e := range m.Sizes {
			l += sovRaftServerpb(uint64(e))
		}
		n += 1 + sovRaftServerpb(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CheckGcPeer) Size() (n int) {
	var l int
	_ = l
	if m.FromRegionId != 0 {
		n += 1 + sovRaftServerpb(uint64(m.FromRegionId))
	}
	if m.CheckRegionId != 0 {
		n += 1 + sovRaftServerpb(uint64(m.CheckRegionId))
	}
	if m.CheckRegionEpoch != nil {
		l = m.CheckRegionEpoch.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.CheckPeer != nil {
		l = m.CheckPeer.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExtraMessage) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRaftServerpb(uint64(m.Type))
	}
	if m.Index != 0 {
		n += 1 + sovRaftServerpb(uint64(m.Index))
	}
	if len(m.CheckPeers) > 0 {
		for _, e := range m.CheckPeers {
			l = e.Size()
			n += 1 + l + sovRaftServerpb(uint64(l))
		}
	}
	if m.WaitData {
		n += 2
	}
	if m.ForcelyAwaken {
		n += 2
	}
	if m.CheckGcPeer != nil {
		l = m.CheckGcPeer.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.FlushMemtable != nil {
		l = m.FlushMemtable.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.AvailabilityContext != nil {
		l = m.AvailabilityContext.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.RefreshBuckets != nil {
		l = m.RefreshBuckets.Size()
		n += 1 + l + sovRaftServerpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRaftServerpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRaftServerpb(x uint64) (n int) {
	return sovRaftServerpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RaftMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromPeer == nil {
				m.FromPeer = &metapb.Peer{}
			}
			if err := m.FromPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToPeer == nil {
				m.ToPeer = &metapb.Peer{}
			}
			if err := m.ToPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &eraftpb.Message{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegionEpoch == nil {
				m.RegionEpoch = &metapb.RegionEpoch{}
			}
			if err := m.RegionEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTombstone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTombstone = bool(v != 0)
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StartKey = append(m.StartKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StartKey == nil {
				m.StartKey = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EndKey = append(m.EndKey[:0], dAtA[iNdEx:postIndex]...)
			if m.EndKey == nil {
				m.EndKey = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergeTarget", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MergeTarget == nil {
				m.MergeTarget = &metapb.Region{}
			}
			if err := m.MergeTarget.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtraMsg == nil {
				m.ExtraMsg = &ExtraMessage{}
			}
			if err := m.ExtraMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtraCtx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtraCtx = append(m.ExtraCtx[:0], dAtA[iNdEx:postIndex]...)
			if m.ExtraCtx == nil {
				m.ExtraCtx = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiskUsage", wireType)
			}
			m.DiskUsage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiskUsage |= (disk_usage.DiskUsage(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftTruncatedState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftTruncatedState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftTruncatedState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotCFFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotCFFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotCFFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cf", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cf = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			m.Checksum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Checksum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CfFiles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CfFiles = append(m.CfFiles, &SnapshotCFFile{})
			if err := m.CfFiles[len(m.CfFiles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForBalance", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForBalance = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForWitness", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForWitness = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenerateDurationSec", wireType)
			}
			m.GenerateDurationSec = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GenerateDurationSec |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabletSnapPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TabletSnapPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitIndexHint", wireType)
			}
			m.CommitIndexHint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitIndexHint |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &RaftMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Done) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Done: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Done: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TabletSnapshotFileMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TabletSnapshotFileMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TabletSnapshotFileMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadChunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeadChunk = append(m.HeadChunk[:0], dAtA[iNdEx:postIndex]...)
			if m.HeadChunk == nil {
				m.HeadChunk = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrailingChunk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrailingChunk = append(m.TrailingChunk[:0], dAtA[iNdEx:postIndex]...)
			if m.TrailingChunk == nil {
				m.TrailingChunk = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TabletSnapshotPreview) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TabletSnapshotPreview: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TabletSnapshotPreview: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metas = append(m.Metas, &TabletSnapshotFileMeta{})
			if err := m.Metas[len(m.Metas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.End = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TabletSnapshotFileChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TabletSnapshotFileChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TabletSnapshotFileChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iv", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Iv = append(m.Iv[:0], dAtA[iNdEx:postIndex]...)
			if m.Iv == nil {
				m.Iv = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Key == nil {
				m.Key = &encryptionpb.DataKey{}
			}
			if err := m.Key.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TabletSnapshotHead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TabletSnapshotHead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TabletSnapshotHead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Message == nil {
				m.Message = &RaftMessage{}
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseCache = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TabletSnapshotEnd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TabletSnapshotEnd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TabletSnapshotEnd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checksum", wireType)
			}
			m.Checksum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Checksum |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TabletSnapshotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TabletSnapshotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TabletSnapshotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TabletSnapshotHead{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &TabletSnapshotRequest_Head{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preview", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TabletSnapshotPreview{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &TabletSnapshotRequest_Preview{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TabletSnapshotFileChunk{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &TabletSnapshotRequest_Chunk{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &TabletSnapshotEnd{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Payload = &TabletSnapshotRequest_End{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcceptedSnapshotFiles) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcceptedSnapshotFiles: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcceptedSnapshotFiles: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = append(m.FileName, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TabletSnapshotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TabletSnapshotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TabletSnapshotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Files == nil {
				m.Files = &AcceptedSnapshotFiles{}
			}
			if err := m.Files.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftSnapshotData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftSnapshotData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftSnapshotData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Region == nil {
				m.Region = &metapb.Region{}
			}
			if err := m.Region.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &KeyValue{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Meta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Meta == nil {
				m.Meta = &SnapshotMeta{}
			}
			if err := m.Meta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemovedRecords = append(m.RemovedRecords, &metapb.Peer{})
			if err := m.RemovedRecords[len(m.RemovedRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergedRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MergedRecords = append(m.MergedRecords, &MergedRecord{})
			if err := m.MergedRecords[len(m.MergedRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreIdent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreIdent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreIdent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClusterId", wireType)
			}
			m.ClusterId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClusterId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			m.StoreId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StoreId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApiVersion", wireType)
			}
			m.ApiVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApiVersion |= (kvrpcpb.APIVersion(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreRecoverState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreRecoverState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreRecoverState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seqno", wireType)
			}
			m.Seqno = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seqno |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftLocalState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftLocalState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftLocalState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HardState == nil {
				m.HardState = &eraftpb.HardState{}
			}
			if err := m.HardState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastIndex", wireType)
			}
			m.LastIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftApplyState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftApplyState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftApplyState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedIndex", wireType)
			}
			m.AppliedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppliedIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TruncatedState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TruncatedState == nil {
				m.TruncatedState = &RaftTruncatedState{}
			}
			if err := m.TruncatedState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCommitIndex", wireType)
			}
			m.LastCommitIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCommitIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitIndex", wireType)
			}
			m.CommitIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitTerm", wireType)
			}
			m.CommitTerm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitTerm |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MergeState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MergeState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MergeState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinIndex", wireType)
			}
			m.MinIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &metapb.Region{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commit", wireType)
			}
			m.Commit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Commit |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MergedRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MergedRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MergedRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceRegionId", wireType)
			}
			m.SourceRegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceRegionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SourceEpoch == nil {
				m.SourceEpoch = &metapb.RegionEpoch{}
			}
			if err := m.SourceEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourcePeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourcePeers = append(m.SourcePeers, &metapb.Peer{})
			if err := m.SourcePeers[len(m.SourcePeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetRegionId", wireType)
			}
			m.TargetRegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetRegionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetEpoch == nil {
				m.TargetEpoch = &metapb.RegionEpoch{}
			}
			if err := m.TargetEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TargetPeers = append(m.TargetPeers, &metapb.Peer{})
			if err := m.TargetPeers[len(m.TargetPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceIndex", wireType)
			}
			m.SourceIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceRemovedRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceRemovedRecords = append(m.SourceRemovedRecords, &metapb.Peer{})
			if err := m.SourceRemovedRecords[len(m.SourceRemovedRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionLocalState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionLocalState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionLocalState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (PeerState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Region", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Region == nil {
				m.Region = &metapb.Region{}
			}
			if err := m.Region.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergeState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MergeState == nil {
				m.MergeState = &MergeState{}
			}
			if err := m.MergeState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabletIndex", wireType)
			}
			m.TabletIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabletIndex |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemovedRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemovedRecords = append(m.RemovedRecords, &metapb.Peer{})
			if err := m.RemovedRecords[len(m.RemovedRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MergedRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MergedRecords = append(m.MergedRecords, &MergedRecord{})
			if err := m.MergedRecords[len(m.MergedRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionSequenceNumberRelation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionSequenceNumberRelation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionSequenceNumberRelation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ApplyState == nil {
				m.ApplyState = &RaftApplyState{}
			}
			if err := m.ApplyState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegionState == nil {
				m.RegionState = &RegionLocalState{}
			}
			if err := m.RegionState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AvailabilityContext) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AvailabilityContext: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AvailabilityContext: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromRegionId", wireType)
			}
			m.FromRegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromRegionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromRegionEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromRegionEpoch == nil {
				m.FromRegionEpoch = &metapb.RegionEpoch{}
			}
			if err := m.FromRegionEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unavailable", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unavailable = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trimmed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Trimmed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushMemtable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushMemtable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushMemtable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegionId", wireType)
			}
			m.RegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RefreshBuckets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RefreshBuckets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RefreshBuckets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keys = append(m.Keys, make([]byte, postIndex-iNdEx))
			copy(m.Keys[len(m.Keys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaftServerpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sizes = append(m.Sizes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRaftServerpb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRaftServerpb
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRaftServerpb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sizes = append(m.Sizes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sizes", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckGcPeer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckGcPeer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckGcPeer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromRegionId", wireType)
			}
			m.FromRegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromRegionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckRegionId", wireType)
			}
			m.CheckRegionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckRegionId |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckRegionEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CheckRegionEpoch == nil {
				m.CheckRegionEpoch = &metapb.RegionEpoch{}
			}
			if err := m.CheckRegionEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CheckPeer == nil {
				m.CheckPeer = &metapb.Peer{}
			}
			if err := m.CheckPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExtraMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExtraMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExtraMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (ExtraMessageType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckPeers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckPeers = append(m.CheckPeers, &metapb.Peer{})
			if err := m.CheckPeers[len(m.CheckPeers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WaitData", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WaitData = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForcelyAwaken", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ForcelyAwaken = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckGcPeer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CheckGcPeer == nil {
				m.CheckGcPeer = &CheckGcPeer{}
			}
			if err := m.CheckGcPeer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushMemtable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FlushMemtable == nil {
				m.FlushMemtable = &FlushMemtable{}
			}
			if err := m.FlushMemtable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvailabilityContext", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AvailabilityContext == nil {
				m.AvailabilityContext = &AvailabilityContext{}
			}
			if err := m.AvailabilityContext.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshBuckets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RefreshBuckets == nil {
				m.RefreshBuckets = &RefreshBuckets{}
			}
			if err := m.RefreshBuckets.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRaftServerpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRaftServerpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRaftServerpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRaftServerpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRaftServerpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRaftServerpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRaftServerpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRaftServerpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRaftServerpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRaftServerpb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("raft_serverpb.proto", fileDescriptor_raft_serverpb_afa94b902b12588e) }

var fileDescriptor_raft_serverpb_afa94b902b12588e = []byte{
	// 2342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x58, 0xcd, 0x73, 0x1b, 0x49,
	0x15, 0xf7, 0x48, 0xb2, 0x3e, 0x9e, 0xbe, 0xc6, 0xed, 0x38, 0x51, 0xe2, 0x4d, 0xe2, 0x4c, 0x36,
	0x89, 0x37, 0x0b, 0x4e, 0xad, 0x37, 0x2c, 0x5b, 0x4b, 0x55, 0xc0, 0x76, 0x12, 0x1c, 0x82, 0x52,
	0xa9, 0xb6, 0x93, 0x14, 0xa7, 0xa9, 0xd6, 0x4c, 0x4b, 0x1a, 0x34, 0x5f, 0x3b, 0xdd, 0x52, 0xa2,
	0x2d, 0xfe, 0x0b, 0x2e, 0x7b, 0xe4, 0x48, 0x71, 0xe3, 0xc6, 0x1f, 0xc0, 0x81, 0x82, 0x0b, 0x47,
	0x8e, 0x54, 0xb8, 0x70, 0x84, 0x0b, 0x55, 0xdc, 0xa8, 0xfe, 0x98, 0xd1, 0x8c, 0xac, 0x38, 0x6c,
	0x4e, 0xd3, 0xfd, 0x3e, 0xba, 0x5f, 0xbf, 0xf7, 0x7b, 0xaf, 0x5f, 0x0f, 0x6c, 0x26, 0x64, 0xc8,
	0x6d, 0x46, 0x93, 0x19, 0x4d, 0xe2, 0xc1, 0x5e, 0x9c, 0x44, 0x3c, 0x42, 0xed, 0x02, 0xf1, 0x4a,
	0x9b, 0x8a, 0x79, 0xca, 0xbd, 0xd2, 0x0a, 0x28, 0x27, 0xd9, 0xac, 0x3d, 0x99, 0x25, 0xb1, 0x93,
	0x4d, 0x4d, 0xd7, 0x63, 0x13, 0x7b, 0xca, 0xc8, 0x88, 0x6a, 0x0a, 0xa2, 0xa1, 0x93, 0xcc, 0x63,
	0xee, 0x45, 0x61, 0x26, 0xd5, 0x4d, 0xa6, 0x8c, 0xcb, 0xa1, 0x22, 0x58, 0xff, 0x2d, 0x43, 0x13,
	0x93, 0x21, 0xef, 0x53, 0x26, 0x54, 0xd1, 0x36, 0x34, 0x12, 0x3a, 0xf2, 0xa2, 0xd0, 0xf6, 0xdc,
	0x9e, 0xb1, 0x63, 0xec, 0x56, 0x70, 0x5d, 0x11, 0x9e, 0xb8, 0xe8, 0x13, 0x68, 0x0c, 0x93, 0x28,
	0xb0, 0x63, 0x4a, 0x93, 0x5e, 0x69, 0xc7, 0xd8, 0x6d, 0xee, 0xb7, 0xf6, 0xb4, 0x51, 0xcf, 0x29,
	0x4d, 0x70, 0x5d, 0xb0, 0xc5, 0x08, 0xdd, 0x82, 0x1a, 0x8f, 0x94, 0x60, 0x79, 0x85, 0x60, 0x95,
	0x47, 0x52, 0xec, 0x2e, 0xd4, 0x02, 0xb5, 0x73, 0xaf, 0x22, 0xc5, 0xcc, 0xbd, 0xf4, 0xcc, 0xda,
	0x22, 0x9c, 0x0a, 0xa0, 0x2f, 0xa0, 0xa5, 0x4d, 0xa3, 0x71, 0xe4, 0x8c, 0x7b, 0xeb, 0x52, 0x61,
	0x33, 0x5d, 0x17, 0x4b, 0xde, 0x23, 0xc1, 0xc2, 0xcd, 0x64, 0x31, 0x41, 0x37, 0xa0, 0xe5, 0x31,
	0x9b, 0x47, 0xc1, 0x80, 0xf1, 0x28, 0xa4, 0xbd, 0xea, 0x8e, 0xb1, 0x5b, 0xc7, 0x4d, 0x8f, 0x9d,
	0xa6, 0x24, 0x71, 0x6a, 0xc6, 0x49, 0xc2, 0xed, 0x09, 0x9d, 0xf7, 0x6a, 0x3b, 0xc6, 0x6e, 0x0b,
	0xd7, 0x25, 0xe1, 0x29, 0x9d, 0xa3, 0x4b, 0x50, 0xa3, 0xa1, 0x2b, 0x59, 0x75, 0xc9, 0xaa, 0xd2,
	0xd0, 0x15, 0x8c, 0xcf, 0xa0, 0x15, 0xd0, 0x64, 0x44, 0x6d, 0x4e, 0x92, 0x11, 0xe5, 0xbd, 0x86,
	0x34, 0xa8, 0x53, 0x34, 0x08, 0x37, 0xa5, 0xcc, 0xa9, 0x14, 0x41, 0x5f, 0x42, 0x83, 0xbe, 0xe1,
	0x09, 0xb1, 0x03, 0x36, 0xea, 0x81, 0x94, 0xdf, 0xde, 0x2b, 0x22, 0xe1, 0x91, 0xe0, 0xa7, 0x87,
	0xaf, 0x4b, 0xe9, 0x3e, 0x1b, 0x09, 0x13, 0x95, 0xa6, 0xc3, 0xdf, 0xf4, 0x9a, 0xca, 0x44, 0x49,
	0x38, 0xe2, 0x6f, 0xd0, 0x7d, 0x80, 0x45, 0xf8, 0x7b, 0xad, 0x1d, 0x63, 0xb7, 0xb3, 0xbf, 0xb5,
	0x97, 0x43, 0xc4, 0x43, 0x8f, 0x4d, 0x5e, 0xc8, 0x15, 0x1b, 0x6e, 0x3a, 0xb4, 0x1e, 0x00, 0x12,
	0xa1, 0x3f, 0x4d, 0xa6, 0xa1, 0x43, 0x38, 0x75, 0x4f, 0x38, 0xe1, 0x14, 0x5d, 0x80, 0x75, 0x2f,
	0x74, 0xe9, 0x1b, 0x1d, 0x7d, 0x35, 0x41, 0x08, 0x2a, 0x9c, 0x26, 0x81, 0x8c, 0x7a, 0x05, 0xcb,
	0xb1, 0xf5, 0x1c, 0x3a, 0x27, 0x21, 0x89, 0xd9, 0x38, 0xe2, 0x47, 0x8f, 0x1f, 0x7b, 0x3e, 0x45,
	0x1d, 0x28, 0x39, 0x43, 0xa9, 0xd8, 0xc0, 0x25, 0x67, 0x28, 0xb4, 0x98, 0xf7, 0x0d, 0x4d, 0xb5,
	0xc4, 0x18, 0x5d, 0x81, 0xba, 0x33, 0xa6, 0xce, 0x84, 0x4d, 0x03, 0x09, 0x8d, 0x36, 0xce, 0xe6,
	0xd6, 0xef, 0x4a, 0xd0, 0x4a, 0x97, 0xec, 0x53, 0x4e, 0xd0, 0x97, 0x50, 0x77, 0x86, 0xf6, 0xd0,
	0xf3, 0x29, 0xeb, 0x19, 0x3b, 0xe5, 0xdd, 0xe6, 0xfe, 0xd5, 0x25, 0x77, 0x15, 0x2d, 0xc0, 0x35,
	0x67, 0x28, 0xbe, 0x0c, 0x5d, 0x87, 0xe6, 0x30, 0x4a, 0xec, 0x01, 0xf1, 0x49, 0xe8, 0x28, 0x0b,
	0xea, 0x18, 0x86, 0x51, 0x72, 0xa8, 0x28, 0xa9, 0xc0, 0x6b, 0x8f, 0x87, 0x94, 0x31, 0x69, 0x8a,
	0x12, 0x78, 0xa5, 0x28, 0xc2, 0x11, 0x12, 0x03, 0x12, 0x99, 0x15, 0xac, 0x26, 0x68, 0x1f, 0xb6,
	0x46, 0x34, 0xa4, 0x09, 0xe1, 0xd4, 0x76, 0xa7, 0x09, 0x11, 0xe9, 0x65, 0x33, 0xea, 0x48, 0x38,
	0x56, 0xf0, 0x66, 0xca, 0x7c, 0xa8, 0x79, 0x27, 0xd4, 0x41, 0xbb, 0x60, 0x72, 0x32, 0xf0, 0x29,
	0xb7, 0x59, 0x48, 0x62, 0x3b, 0x26, 0x7c, 0x2c, 0x51, 0xd8, 0xc0, 0x1d, 0x45, 0x17, 0x87, 0x78,
	0x4e, 0xf8, 0x18, 0xdd, 0x85, 0x0d, 0x27, 0x0a, 0x02, 0x8f, 0xdb, 0xd2, 0xed, 0xf6, 0xd8, 0x0b,
	0xb9, 0x04, 0x64, 0x05, 0x77, 0x15, 0xe3, 0x89, 0xa0, 0x1f, 0x7b, 0x21, 0xb7, 0x7e, 0x01, 0xed,
	0xec, 0xf0, 0xe3, 0x69, 0x38, 0x41, 0xf7, 0x17, 0xc9, 0x64, 0x48, 0x68, 0x5d, 0x59, 0xf2, 0x55,
	0x2e, 0xd1, 0x17, 0x69, 0x85, 0xa0, 0xe2, 0x12, 0x4e, 0xa4, 0x87, 0x5a, 0x58, 0x8e, 0xad, 0x2a,
	0x54, 0x1e, 0x46, 0x21, 0xb5, 0xbe, 0x35, 0xe0, 0xe2, 0x69, 0x66, 0xa1, 0xd8, 0x49, 0x38, 0x57,
	0x46, 0x66, 0x1b, 0x1a, 0x22, 0x2c, 0xb6, 0x8c, 0xaf, 0x2e, 0x14, 0x82, 0x70, 0x22, 0x62, 0x9c,
	0x32, 0x43, 0x12, 0x28, 0xd7, 0x37, 0x14, 0xf3, 0x19, 0x09, 0x28, 0xba, 0x0a, 0x30, 0xa6, 0xc4,
	0xb5, 0x1d, 0x61, 0xb4, 0xf4, 0x7b, 0x0b, 0x37, 0x04, 0x45, 0x9d, 0xe2, 0x16, 0x74, 0x78, 0x42,
	0x3c, 0xdf, 0x0b, 0x47, 0x5a, 0xa4, 0x22, 0x45, 0xda, 0x29, 0x55, 0x8a, 0x59, 0x43, 0xd8, 0x2a,
	0x5a, 0xf6, 0x3c, 0xa1, 0x33, 0x8f, 0xbe, 0x46, 0x3f, 0x82, 0x75, 0x91, 0x80, 0x29, 0x5e, 0x6e,
	0x2d, 0xf9, 0x60, 0xf5, 0x71, 0xb0, 0xd2, 0x41, 0x26, 0x94, 0x69, 0xe8, 0x6a, 0xb4, 0x88, 0xa1,
	0xf5, 0x1b, 0x03, 0x2e, 0x9d, 0xd5, 0x51, 0xa6, 0x7e, 0xb8, 0x0f, 0x52, 0xa7, 0x97, 0x17, 0x4e,
	0x17, 0xc9, 0xe3, 0xcd, 0xf4, 0x61, 0x4b, 0xde, 0x0c, 0xdd, 0x81, 0xb2, 0xa8, 0x39, 0xaa, 0xcc,
	0x6d, 0xed, 0x15, 0xaa, 0xf9, 0x43, 0xc2, 0xc9, 0x53, 0x3a, 0xc7, 0x42, 0xc2, 0x1a, 0x01, 0x2a,
	0x5a, 0x78, 0x4c, 0x89, 0xfb, 0x81, 0x68, 0xd8, 0x86, 0xc6, 0x94, 0x51, 0xdb, 0x21, 0xce, 0x38,
	0x4d, 0x9a, 0xfa, 0x94, 0xd1, 0x23, 0x31, 0xb7, 0xee, 0xc1, 0x46, 0x71, 0xa3, 0x47, 0xa1, 0x5b,
	0xc8, 0x67, 0xed, 0x83, 0x2c, 0x9f, 0x7f, 0x5d, 0x5a, 0x8e, 0x12, 0xa6, 0x5f, 0x4f, 0x29, 0xe3,
	0xe8, 0x87, 0x50, 0x11, 0x21, 0xd7, 0xa6, 0xdd, 0x38, 0x37, 0x48, 0xe2, 0x38, 0xc7, 0x6b, 0x58,
	0x2a, 0xa0, 0x9f, 0x40, 0x2d, 0x56, 0x91, 0xd6, 0x37, 0xd0, 0xc7, 0xe7, 0xea, 0x6a, 0x54, 0x1c,
	0xaf, 0xe1, 0x54, 0x0d, 0x3d, 0x80, 0xf5, 0x05, 0xf4, 0x9a, 0xfb, 0xb7, 0xdf, 0x0b, 0x10, 0x19,
	0xec, 0xe3, 0x35, 0xac, 0xd4, 0xd0, 0x7d, 0x85, 0x11, 0x75, 0x5f, 0xed, 0x9c, 0xab, 0xfd, 0x28,
	0x14, 0x86, 0x0b, 0xf1, 0xc3, 0x06, 0xd4, 0x62, 0x32, 0xf7, 0x23, 0xe2, 0x5a, 0xf7, 0x61, 0xeb,
	0xc0, 0x71, 0x68, 0x2c, 0x4a, 0x6e, 0x6e, 0x1b, 0x56, 0x84, 0x8c, 0x80, 0x6f, 0x0e, 0x32, 0xd6,
	0xe9, 0x72, 0x2a, 0x62, 0xca, 0xe2, 0x28, 0x64, 0x14, 0x7d, 0x05, 0xeb, 0x69, 0x85, 0x5c, 0xe5,
	0x90, 0x95, 0x7b, 0x61, 0xa5, 0x62, 0xed, 0x43, 0xfd, 0x29, 0x9d, 0xbf, 0x24, 0xfe, 0x94, 0x0a,
	0xf0, 0x0b, 0xc0, 0x19, 0x12, 0x81, 0x62, 0x28, 0x4a, 0xe0, 0x4c, 0xb0, 0x74, 0x71, 0x50, 0x13,
	0xeb, 0xcf, 0x25, 0x30, 0x05, 0x78, 0xd2, 0x05, 0x05, 0x18, 0xd1, 0x6d, 0xa8, 0xaa, 0x4b, 0x57,
	0x5b, 0xb1, 0x7c, 0x0d, 0x6a, 0x6e, 0x31, 0x67, 0x4a, 0x4b, 0x39, 0xf3, 0x69, 0x96, 0x16, 0x22,
	0x75, 0x2f, 0x2d, 0x1d, 0x24, 0x35, 0x54, 0xe7, 0x4b, 0x0f, 0x6a, 0x33, 0x9a, 0x30, 0xb1, 0xa5,
	0xaa, 0xd0, 0xe9, 0x14, 0xdd, 0x83, 0x8a, 0xd8, 0x5c, 0xa7, 0xce, 0xf6, 0x3b, 0x6e, 0x0c, 0x99,
	0xf7, 0x52, 0x10, 0xfd, 0x00, 0xba, 0x09, 0x0d, 0xa2, 0x19, 0x75, 0xed, 0x84, 0x3a, 0x51, 0xe2,
	0xb2, 0x5e, 0x55, 0x9a, 0x50, 0xec, 0x5a, 0x3a, 0x5a, 0x08, 0x2b, 0x19, 0x74, 0x08, 0x1d, 0x79,
	0xb9, 0x2f, 0xb4, 0x6a, 0x52, 0x6b, 0x79, 0xc7, 0xbe, 0x14, 0x52, 0x5a, 0xb8, 0x1d, 0xe4, 0x66,
	0xcc, 0xfa, 0x15, 0xc0, 0x09, 0x8f, 0x12, 0xfa, 0xc4, 0xa5, 0x21, 0x17, 0xb5, 0xd1, 0xf1, 0xa7,
	0x8c, 0xd3, 0x64, 0xd1, 0x7f, 0x35, 0x34, 0xe5, 0x89, 0x8b, 0x2e, 0x43, 0x9d, 0x09, 0x61, 0xc1,
	0x54, 0xbe, 0xab, 0x31, 0xa5, 0x8c, 0xee, 0x43, 0x93, 0xc4, 0x9e, 0x9d, 0x7a, 0xa4, 0x2c, 0x7b,
	0x80, 0xcd, 0xbd, 0xb4, 0x49, 0x3c, 0x78, 0xfe, 0xe4, 0xa5, 0x62, 0x61, 0x20, 0xb1, 0xa7, 0xc7,
	0xd6, 0x27, 0xb0, 0x21, 0x77, 0x17, 0xd6, 0xcc, 0x68, 0x92, 0x75, 0x00, 0x8c, 0x7e, 0x1d, 0x46,
	0x69, 0x07, 0x20, 0x27, 0xd6, 0x00, 0x3a, 0x22, 0xe8, 0x3f, 0x8f, 0x1c, 0xe2, 0x2b, 0xb9, 0xcf,
	0x00, 0xc6, 0x24, 0x71, 0x6d, 0x26, 0x66, 0x3a, 0xec, 0x28, 0xeb, 0xdf, 0x8e, 0x49, 0xa2, 0x3a,
	0x0a, 0xdc, 0x18, 0xa7, 0x43, 0x71, 0x3e, 0x9f, 0x30, 0x7d, 0xbb, 0xe9, 0x23, 0x34, 0x04, 0x45,
	0x5e, 0x6b, 0xd6, 0xbf, 0x0d, 0xb5, 0xc9, 0x41, 0x1c, 0xfb, 0x73, 0xa5, 0x71, 0x13, 0xda, 0x24,
	0x8e, 0x7d, 0x8f, 0xba, 0x76, 0xbe, 0x2d, 0x69, 0x69, 0xa2, 0xd4, 0x43, 0x3f, 0x83, 0x2e, 0x4f,
	0xbb, 0x18, 0x6d, 0x4e, 0x69, 0x65, 0x61, 0x39, 0xdb, 0xef, 0xe0, 0x0e, 0x2f, 0xf6, 0x3f, 0x77,
	0x61, 0x43, 0x9a, 0x98, 0xbf, 0x87, 0xa5, 0x3b, 0x2b, 0xb8, 0x2b, 0x18, 0x47, 0x8b, 0x6b, 0x58,
	0xb4, 0x96, 0x05, 0x31, 0x85, 0xc3, 0x66, 0xee, 0xa6, 0x16, 0x6d, 0x86, 0x16, 0x91, 0xfd, 0x93,
	0xea, 0x12, 0x40, 0x91, 0x4e, 0x45, 0x17, 0xe5, 0x01, 0x48, 0x7c, 0xa8, 0xdd, 0xb7, 0xa1, 0x11,
	0x78, 0x61, 0xe1, 0xa8, 0xf5, 0xc0, 0x0b, 0xd5, 0x5a, 0xb7, 0xa1, 0xaa, 0x5b, 0xcd, 0xd2, 0xea,
	0x1c, 0x53, 0x5c, 0x74, 0x11, 0xaa, 0x6a, 0x03, 0x6d, 0xb7, 0x9e, 0x59, 0xbf, 0x2f, 0x43, 0x2b,
	0x8f, 0x45, 0xd1, 0x98, 0xb0, 0x68, 0x9a, 0x38, 0xd4, 0x5e, 0x6e, 0xfa, 0x3b, 0x8a, 0x8e, 0xd3,
	0xd6, 0xff, 0x0b, 0x68, 0x69, 0x49, 0xd5, 0x7c, 0x97, 0xce, 0x69, 0xbe, 0x95, 0xa0, 0x6a, 0xbe,
	0xef, 0x65, 0x7a, 0xe2, 0x2d, 0xc0, 0x74, 0x66, 0x17, 0xd3, 0x4a, 0x2b, 0x88, 0x31, 0x53, 0xbd,
	0x92, 0x38, 0x45, 0xce, 0x24, 0xe5, 0xd6, 0x8e, 0xa2, 0xe7, 0x4d, 0xd2, 0x92, 0xef, 0x7f, 0x0f,
	0x28, 0xc1, 0xcc, 0x24, 0xad, 0xa7, 0x4c, 0x5a, 0x95, 0xe9, 0x5a, 0x41, 0x99, 0x94, 0x75, 0xc4,
	0xb5, 0x7c, 0x47, 0x7c, 0x23, 0x3b, 0x99, 0x62, 0xd6, 0x55, 0xec, 0x15, 0x4d, 0xc5, 0xeb, 0x10,
	0x2e, 0x66, 0xee, 0x2d, 0x56, 0x97, 0xc6, 0x8a, 0x3d, 0x2f, 0xa4, 0x2e, 0xcf, 0xd7, 0x18, 0xeb,
	0x8f, 0xa2, 0xd8, 0xca, 0xa3, 0xe4, 0x32, 0x6f, 0x4f, 0xb6, 0xa6, 0x3a, 0xe9, 0x3a, 0xfb, 0xbd,
	0x25, 0x94, 0x8b, 0xe5, 0x14, 0xb8, 0x95, 0x58, 0xae, 0x38, 0x97, 0xce, 0x2d, 0xce, 0x5f, 0x81,
	0x7a, 0xad, 0xe8, 0x1c, 0x52, 0x17, 0xe4, 0xe5, 0x55, 0xd5, 0x4c, 0x2d, 0x0f, 0xc1, 0x02, 0xb9,
	0x37, 0x84, 0x5b, 0x65, 0x93, 0x5b, 0xc8, 0x05, 0x45, 0x53, 0xfe, 0x58, 0x51, 0x66, 0xd7, 0x3f,
	0xa8, 0xcc, 0x56, 0xbf, 0x73, 0x99, 0xfd, 0xa7, 0x01, 0x1f, 0xa9, 0xc3, 0x9e, 0x88, 0x0e, 0x24,
	0x74, 0xe8, 0xb3, 0x69, 0x30, 0xa0, 0x09, 0xa6, 0xbe, 0x6c, 0xd3, 0xcf, 0x7f, 0xf8, 0xde, 0x81,
	0x2e, 0xd3, 0x6a, 0x76, 0x28, 0xf5, 0x74, 0xed, 0xea, 0xb0, 0xc2, 0x6a, 0xe8, 0x81, 0xa8, 0xc2,
	0xb1, 0x3f, 0x2f, 0x38, 0xf0, 0xea, 0x8a, 0x22, 0xb4, 0xa8, 0x70, 0xa2, 0x1e, 0x67, 0xd5, 0xee,
	0x30, 0x7b, 0xe3, 0xaa, 0x05, 0x54, 0x93, 0x71, 0x7d, 0x79, 0x81, 0x25, 0x3c, 0xa4, 0xef, 0x5d,
	0x39, 0xb1, 0xfe, 0x60, 0xc0, 0xe6, 0xc1, 0x8c, 0x78, 0x3e, 0x19, 0x78, 0xbe, 0xc7, 0xe7, 0x47,
	0x51, 0xc8, 0xe9, 0x1b, 0x8e, 0x3e, 0x86, 0x8e, 0x7c, 0xbd, 0x2f, 0x1f, 0xb3, 0x25, 0xa8, 0x59,
	0x56, 0xfd, 0x18, 0x36, 0xf2, 0x52, 0xef, 0xcd, 0xf6, 0xee, 0x42, 0x5b, 0xa5, 0xd7, 0x0e, 0x34,
	0xa7, 0x21, 0x51, 0xfb, 0xfb, 0x54, 0xbf, 0xab, 0xf2, 0x24, 0x71, 0x71, 0xf3, 0xc4, 0x0b, 0x02,
	0xaa, 0x32, 0xbb, 0x8e, 0xd3, 0xa9, 0xf5, 0x3d, 0x68, 0x3f, 0xf6, 0xa7, 0x6c, 0xdc, 0xa7, 0x81,
	0xc4, 0xcd, 0xb9, 0x51, 0xb1, 0x4e, 0xa1, 0x83, 0xe9, 0x30, 0xa1, 0x6c, 0x7c, 0x38, 0x75, 0x26,
	0x94, 0xb3, 0x7c, 0x4b, 0x60, 0x14, 0x5b, 0x02, 0x04, 0x95, 0x09, 0x9d, 0xb3, 0x5e, 0x69, 0xa7,
	0x2c, 0x1a, 0x6e, 0x31, 0x96, 0xf7, 0x9c, 0xf7, 0x0d, 0x55, 0x45, 0x49, 0xdc, 0x73, 0x62, 0x62,
	0xfd, 0xc5, 0x80, 0xe6, 0x91, 0x68, 0x60, 0x7f, 0xea, 0xc8, 0x5f, 0x14, 0xff, 0x9f, 0xdb, 0x6e,
	0x43, 0x57, 0x76, 0xbd, 0x39, 0x31, 0x85, 0x90, 0xb6, 0x24, 0x67, 0x72, 0x07, 0x80, 0x0a, 0x72,
	0xca, 0xbf, 0xe5, 0x77, 0xfb, 0xd7, 0xcc, 0xe9, 0x2b, 0x07, 0x7f, 0x0a, 0xa0, 0x96, 0x90, 0x7f,
	0x57, 0x2a, 0x2b, 0xfe, 0xae, 0x34, 0x24, 0x5f, 0x0c, 0xad, 0x7f, 0x95, 0xa1, 0x95, 0xff, 0xa3,
	0x80, 0x3e, 0x87, 0x0a, 0x9f, 0xc7, 0x69, 0xe5, 0xb8, 0x7e, 0xce, 0xcf, 0x87, 0xd3, 0x79, 0x4c,
	0xb1, 0x14, 0x5e, 0x54, 0xc0, 0x52, 0xbe, 0x02, 0x7e, 0x1f, 0x9a, 0x0b, 0x43, 0x56, 0x97, 0x76,
	0xc8, 0x2c, 0x91, 0xdd, 0xed, 0x6b, 0xe2, 0x71, 0x5b, 0x76, 0x78, 0x2a, 0xf0, 0x75, 0x41, 0x90,
	0xed, 0xe3, 0x2d, 0xe8, 0x0c, 0xa3, 0xc4, 0xa1, 0xfe, 0xdc, 0x26, 0xaf, 0xc9, 0x84, 0x86, 0xb2,
	0x9c, 0xd7, 0x71, 0x5b, 0x53, 0x0f, 0x24, 0x11, 0x3d, 0x00, 0xe5, 0x4f, 0x7b, 0xe4, 0xa8, 0xe3,
	0x57, 0x57, 0x3e, 0x6d, 0x72, 0xf1, 0xc3, 0xca, 0x46, 0x1d, 0xcc, 0x23, 0xe8, 0x0c, 0x05, 0xc0,
	0xec, 0x40, 0x23, 0x4c, 0xd6, 0xf4, 0xe6, 0xfe, 0x47, 0x4b, 0x0b, 0x14, 0x50, 0x88, 0xdb, 0xc3,
	0x02, 0x28, 0x5f, 0xc0, 0x05, 0x92, 0xcb, 0x2f, 0xdb, 0x51, 0x09, 0x26, 0x6f, 0x80, 0xe6, 0xbe,
	0xb5, 0xdc, 0x7e, 0x9f, 0x4d, 0x45, 0xbc, 0x49, 0x56, 0xe4, 0xe7, 0x63, 0x51, 0x1d, 0x25, 0x9c,
	0xed, 0x81, 0xc2, 0xb3, 0xfe, 0xa3, 0x74, 0xa6, 0x7e, 0x14, 0x40, 0x2f, 0xca, 0x65, 0x7e, 0x7e,
	0x17, 0x43, 0x23, 0xbb, 0x00, 0x10, 0x40, 0xf5, 0x59, 0x94, 0x04, 0xc4, 0x37, 0xd7, 0x50, 0x0b,
	0xea, 0xb2, 0xec, 0x78, 0xe1, 0xc8, 0x34, 0x50, 0x1b, 0x1a, 0xd9, 0x0f, 0x30, 0xb3, 0x84, 0x9a,
	0x50, 0x13, 0xf5, 0x53, 0xf0, 0xca, 0xa8, 0x0b, 0xcd, 0x17, 0x8b, 0x84, 0x35, 0x2b, 0x77, 0xff,
	0x53, 0x06, 0x73, 0x19, 0x1b, 0x68, 0x13, 0xba, 0x7d, 0x36, 0x52, 0xd0, 0x7c, 0x45, 0x26, 0xf4,
	0x45, 0x6c, 0xae, 0xa1, 0x1e, 0x5c, 0xe8, 0xb3, 0xd1, 0x2b, 0x12, 0x72, 0x1c, 0xf9, 0xfe, 0x80,
	0x38, 0x13, 0x59, 0x96, 0x4d, 0x03, 0x6d, 0xc1, 0x46, 0x9f, 0x8d, 0x64, 0x68, 0x4e, 0x38, 0xf1,
	0xe5, 0x7d, 0x6f, 0x96, 0xd0, 0x55, 0xb8, 0x7c, 0x86, 0x9c, 0x3e, 0x6d, 0xcc, 0x32, 0xba, 0x04,
	0x9b, 0x7d, 0x36, 0x3a, 0xf6, 0x06, 0x34, 0x09, 0x45, 0xa9, 0x53, 0xef, 0x47, 0xb3, 0xa2, 0x37,
	0xca, 0x31, 0xb4, 0xca, 0x3a, 0xba, 0x03, 0x37, 0xa5, 0x5d, 0xbf, 0xa4, 0x0e, 0x57, 0x2d, 0xeb,
	0xe8, 0x88, 0x4c, 0x19, 0x75, 0x0f, 0xe7, 0x7d, 0x1a, 0x44, 0xc9, 0x5c, 0xfe, 0xfe, 0x32, 0xab,
	0xe8, 0x0a, 0x5c, 0xec, 0xb3, 0x51, 0x3e, 0x40, 0xe9, 0xf2, 0x35, 0xb4, 0x0d, 0x97, 0xce, 0xf0,
	0xf4, 0x0e, 0x75, 0x64, 0xc1, 0xb5, 0x3e, 0x1b, 0xbd, 0x8c, 0xb8, 0x30, 0x35, 0xf6, 0x3d, 0xd9,
	0x3e, 0xca, 0x3b, 0x2e, 0x5d, 0xa0, 0x81, 0x6e, 0xc2, 0xf5, 0x77, 0xca, 0xe8, 0x85, 0x00, 0x5d,
	0x00, 0xb3, 0xcf, 0x46, 0x1a, 0xa9, 0x5a, 0xb5, 0xa9, 0x3d, 0x95, 0x52, 0xb5, 0x70, 0x4b, 0x0b,
	0x17, 0xa0, 0x69, 0xb6, 0xb5, 0x70, 0x11, 0x13, 0x66, 0x07, 0xdd, 0x80, 0xab, 0x42, 0x98, 0x72,
	0x67, 0xac, 0x3a, 0xd6, 0x65, 0x0b, 0xbb, 0xfa, 0x14, 0x2b, 0x45, 0xf4, 0x9e, 0xe6, 0xe1, 0xed,
	0xbf, 0xfd, 0xb6, 0x6e, 0xfc, 0xe9, 0xed, 0x35, 0xe3, 0xaf, 0x6f, 0xaf, 0x19, 0x7f, 0x7f, 0x7b,
	0xcd, 0xf8, 0xf6, 0x1f, 0xd7, 0xd6, 0xc0, 0x8c, 0x92, 0xd1, 0x1e, 0xf7, 0x26, 0xb3, 0xbd, 0xc9,
	0x4c, 0xfe, 0x47, 0x1e, 0x54, 0xe5, 0xe7, 0xf3, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x45,
	0x61, 0x73, 0xd7, 0x16, 0x00, 0x00,
}
